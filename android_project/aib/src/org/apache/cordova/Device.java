// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.*;
import android.os.Build;
import android.telephony.TelephonyManager;
import java.util.TimeZone;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

public class Device extends Plugin
{

    public Device()
    {
        telephonyReceiver = null;
    }

    private void initTelephonyReceiver()
    {
        IntentFilter intentfilter = new IntentFilter();
        intentfilter.addAction("android.intent.action.PHONE_STATE");
        telephonyReceiver = new BroadcastReceiver() {

            public void onReceive(Context context, Intent intent)
            {
                if(intent == null || !intent.getAction().equals("android.intent.action.PHONE_STATE") || !intent.hasExtra("state")) goto _L2; else goto _L1
_L1:
                String s = intent.getStringExtra("state");
                if(!s.equals(TelephonyManager.EXTRA_STATE_RINGING)) goto _L4; else goto _L3
_L3:
                LOG.i("Device", "Telephone RINGING");
                myctx.postMessage("telephone", "ringing");
_L2:
                return;
_L4:
                if(s.equals(TelephonyManager.EXTRA_STATE_OFFHOOK))
                {
                    LOG.i("Device", "Telephone OFFHOOK");
                    myctx.postMessage("telephone", "offhook");
                } else
                if(s.equals(TelephonyManager.EXTRA_STATE_IDLE))
                {
                    LOG.i("Device", "Telephone IDLE");
                    myctx.postMessage("telephone", "idle");
                }
                if(true) goto _L2; else goto _L5
_L5:
            }

            final Device this$0;
            final CordovaInterface val$myctx;

            
            {
                this$0 = Device.this;
                myctx = cordovainterface;
                super();
            }
        };
        ctx.registerReceiver(telephonyReceiver, intentfilter);
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.OK;
        PluginResult pluginresult;
        try
        {
            if(s.equals("getDeviceInfo"))
            {
                JSONObject jsonobject = new JSONObject();
                jsonobject.put("uuid", uuid);
                jsonobject.put("version", getOSVersion());
                jsonobject.put("platform", platform);
                jsonobject.put("name", getProductName());
                jsonobject.put("cordova", cordovaVersion);
                pluginresult = new PluginResult(status, jsonobject);
            } else
            {
                pluginresult = new PluginResult(status, "");
            }
        }
        catch(JSONException jsonexception)
        {
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
        }
        return pluginresult;
    }

    public String getCordovaVersion()
    {
        return cordovaVersion;
    }

    public String getModel()
    {
        return Build.MODEL;
    }

    public String getOSVersion()
    {
        return android.os.Build.VERSION.RELEASE;
    }

    public String getPlatform()
    {
        return platform;
    }

    public String getProductName()
    {
        return Build.PRODUCT;
    }

    public String getSDKVersion()
    {
        return android.os.Build.VERSION.SDK;
    }

    public String getTimeZoneID()
    {
        return TimeZone.getDefault().getID();
    }

    public String getUuid()
    {
        return android.provider.Settings.Secure.getString(ctx.getContentResolver(), "android_id");
    }

    public boolean isSynch(String s)
    {
        boolean flag;
        if(s.equals("getDeviceInfo"))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void onDestroy()
    {
        ctx.unregisterReceiver(telephonyReceiver);
    }

    public void setContext(CordovaInterface cordovainterface)
    {
        super.setContext(cordovainterface);
        uuid = getUuid();
        initTelephonyReceiver();
    }

    public static final String TAG = "Device";
    public static String cordovaVersion = "1.5.0";
    public static String platform = "Android";
    public static String uuid;
    BroadcastReceiver telephonyReceiver;

}
