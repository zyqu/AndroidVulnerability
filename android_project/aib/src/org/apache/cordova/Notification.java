// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.media.Ringtone;
import android.media.RingtoneManager;
import android.os.Vibrator;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;

public class Notification extends Plugin
{

    public Notification()
    {
        confirmResult = -1;
        spinnerDialog = null;
        progressDialog = null;
    }

    public void activityStart(String s, String s1)
    {
        this;
        JVM INSTR monitorenter ;
        if(spinnerDialog != null)
        {
            spinnerDialog.dismiss();
            spinnerDialog = null;
        }
        Runnable runnable = new Runnable() {

            public void run()
            {
                notification.spinnerDialog = ProgressDialog.show(ctx.getContext(), title, message, true, true, new android.content.DialogInterface.OnCancelListener() {

                    public void onCancel(DialogInterface dialoginterface)
                    {
                        notification.spinnerDialog = null;
                    }

                    final _cls3 this$1;

            
            {
                this$1 = _cls3.this;
                super();
            }
                });
            }

            final Notification this$0;
            final CordovaInterface val$ctx;
            final String val$message;
            final Notification val$notification;
            final String val$title;

            
            {
                this$0 = Notification.this;
                notification = notification2;
                ctx = cordovainterface;
                title = s;
                message = s1;
                super();
            }
        };
        ctx.runOnUiThread(runnable);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void activityStop()
    {
        this;
        JVM INSTR monitorenter ;
        if(spinnerDialog != null)
        {
            spinnerDialog.dismiss();
            spinnerDialog = null;
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void alert(String s, String s1, String s2, String s3)
    {
        this;
        JVM INSTR monitorenter ;
        Runnable runnable = new Runnable() {

            public void run()
            {
                android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(ctx.getContext());
                builder.setMessage(message);
                builder.setTitle(title);
                builder.setCancelable(false);
                builder.setPositiveButton(buttonLabel, new android.content.DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialoginterface, int i)
                    {
                        dialoginterface.dismiss();
                        notification.success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, 0), callbackId);
                    }

                    final _cls1 this$1;

            
            {
                this$1 = _cls1.this;
                super();
            }
                });
                builder.create();
                builder.show();
            }

            final Notification this$0;
            final String val$buttonLabel;
            final String val$callbackId;
            final CordovaInterface val$ctx;
            final String val$message;
            final Notification val$notification;
            final String val$title;

            
            {
                this$0 = Notification.this;
                ctx = cordovainterface;
                message = s;
                title = s1;
                buttonLabel = s2;
                notification = notification2;
                callbackId = s3;
                super();
            }
        };
        ctx.runOnUiThread(runnable);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void beep(long l)
    {
        android.net.Uri uri = RingtoneManager.getDefaultUri(2);
        Ringtone ringtone = RingtoneManager.getRingtone(ctx.getContext(), uri);
        if(ringtone != null)
        {
            for(long l1 = 0L; l1 < l; l1++)
            {
                ringtone.play();
                for(long l2 = 5000L; ringtone.isPlaying() && l2 > 0L;)
                {
                    l2 -= 100L;
                    try
                    {
                        Thread.sleep(100L);
                    }
                    catch(InterruptedException interruptedexception) { }
                }

            }

        }
    }

    public void confirm(String s, String s1, String s2, String s3)
    {
        this;
        JVM INSTR monitorenter ;
        Runnable runnable = new Runnable() {

            public void run()
            {
                android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(ctx.getContext());
                builder.setMessage(message);
                builder.setTitle(title);
                builder.setCancelable(false);
                if(fButtons.length > 0)
                    builder.setPositiveButton(fButtons[0], new android.content.DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialoginterface, int i)
                        {
                            dialoginterface.dismiss();
                            notification.success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, 1), callbackId);
                        }

                        final _cls2 this$1;

            
            {
                this$1 = _cls2.this;
                super();
            }
                    });
                if(fButtons.length > 1)
                    builder.setNeutralButton(fButtons[1], new android.content.DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialoginterface, int i)
                        {
                            dialoginterface.dismiss();
                            notification.success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, 2), callbackId);
                        }

                        final _cls2 this$1;

            
            {
                this$1 = _cls2.this;
                super();
            }
                    });
                if(fButtons.length > 2)
                    builder.setNegativeButton(fButtons[2], new android.content.DialogInterface.OnClickListener() {

                        public void onClick(DialogInterface dialoginterface, int i)
                        {
                            dialoginterface.dismiss();
                            notification.success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, 3), callbackId);
                        }

                        final _cls2 this$1;

            
            {
                this$1 = _cls2.this;
                super();
            }
                    });
                builder.create();
                builder.show();
            }

            final Notification this$0;
            final String val$callbackId;
            final CordovaInterface val$ctx;
            final String val$fButtons[];
            final String val$message;
            final Notification val$notification;
            final String val$title;

            
            {
                this$0 = Notification.this;
                ctx = cordovainterface;
                message = s;
                title = s1;
                fButtons = as;
                notification = notification2;
                callbackId = s2;
                super();
            }
        };
        ctx.runOnUiThread(runnable);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.OK;
        PluginResult pluginresult;
        if(s.equals("beep"))
        {
            beep(jsonarray.getLong(0));
        } else
        {
            if(!s.equals("vibrate"))
                break MISSING_BLOCK_LABEL_77;
            vibrate(jsonarray.getLong(0));
        }
_L1:
        JSONException jsonexception;
        pluginresult = new PluginResult(status, "");
        break MISSING_BLOCK_LABEL_290;
        try
        {
            if(s.equals("alert"))
            {
                alert(jsonarray.getString(0), jsonarray.getString(1), jsonarray.getString(2), s1);
                PluginResult pluginresult2 = new PluginResult(org.apache.cordova.api.PluginResult.Status.NO_RESULT);
                pluginresult2.setKeepCallback(true);
                pluginresult = pluginresult2;
                break MISSING_BLOCK_LABEL_290;
            }
            if(s.equals("confirm"))
            {
                confirm(jsonarray.getString(0), jsonarray.getString(1), jsonarray.getString(2), s1);
                PluginResult pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.NO_RESULT);
                pluginresult1.setKeepCallback(true);
                pluginresult = pluginresult1;
                break MISSING_BLOCK_LABEL_290;
            }
            if(s.equals("activityStart"))
                activityStart(jsonarray.getString(0), jsonarray.getString(1));
            else
            if(s.equals("activityStop"))
                activityStop();
            else
            if(s.equals("progressStart"))
                progressStart(jsonarray.getString(0), jsonarray.getString(1));
            else
            if(s.equals("progressValue"))
                progressValue(jsonarray.getInt(0));
            else
            if(s.equals("progressStop"))
                progressStop();
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
            break MISSING_BLOCK_LABEL_290;
        }
          goto _L1
        return pluginresult;
    }

    public boolean isSynch(String s)
    {
        boolean flag;
        if(s.equals("alert"))
            flag = true;
        else
        if(s.equals("confirm"))
            flag = true;
        else
        if(s.equals("activityStart"))
            flag = true;
        else
        if(s.equals("activityStop"))
            flag = true;
        else
        if(s.equals("progressStart"))
            flag = true;
        else
        if(s.equals("progressValue"))
            flag = true;
        else
        if(s.equals("progressStop"))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void progressStart(String s, String s1)
    {
        this;
        JVM INSTR monitorenter ;
        if(progressDialog != null)
        {
            progressDialog.dismiss();
            progressDialog = null;
        }
        Runnable runnable = new Runnable() {

            public void run()
            {
                notification.progressDialog = new ProgressDialog(ctx.getContext());
                notification.progressDialog.setProgressStyle(1);
                notification.progressDialog.setTitle(title);
                notification.progressDialog.setMessage(message);
                notification.progressDialog.setCancelable(true);
                notification.progressDialog.setMax(100);
                notification.progressDialog.setProgress(0);
                notification.progressDialog.setOnCancelListener(new android.content.DialogInterface.OnCancelListener() {

                    public void onCancel(DialogInterface dialoginterface)
                    {
                        notification.progressDialog = null;
                    }

                    final _cls4 this$1;

            
            {
                this$1 = _cls4.this;
                super();
            }
                });
                notification.progressDialog.show();
            }

            final Notification this$0;
            final CordovaInterface val$ctx;
            final String val$message;
            final Notification val$notification;
            final String val$title;

            
            {
                this$0 = Notification.this;
                notification = notification2;
                ctx = cordovainterface;
                title = s;
                message = s1;
                super();
            }
        };
        ctx.runOnUiThread(runnable);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void progressStop()
    {
        this;
        JVM INSTR monitorenter ;
        if(progressDialog != null)
        {
            progressDialog.dismiss();
            progressDialog = null;
        }
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void progressValue(int i)
    {
        this;
        JVM INSTR monitorenter ;
        if(progressDialog != null)
            progressDialog.setProgress(i);
        this;
        JVM INSTR monitorexit ;
        return;
        Exception exception;
        exception;
        throw exception;
    }

    public void vibrate(long l)
    {
        if(l == 0L)
            l = 500L;
        ((Vibrator)ctx.getSystemService("vibrator")).vibrate(l);
    }

    public int confirmResult;
    public ProgressDialog progressDialog;
    public ProgressDialog spinnerDialog;
}
