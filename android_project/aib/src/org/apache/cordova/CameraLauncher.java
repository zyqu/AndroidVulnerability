// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.*;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import java.io.*;
import org.apache.commons.codec.binary.Base64;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;

// Referenced classes of package org.apache.cordova:
//            DirectoryManager, ExifHelper, FileUtils

public class CameraLauncher extends Plugin
{

    public CameraLauncher()
    {
    }

    private void checkForDuplicateImage(int i)
    {
        byte byte0 = 1;
        Cursor cursor = queryImgDB();
        int j = cursor.getCount();
        if(i == 1)
            byte0 = 2;
        if(j - numPics == byte0)
        {
            cursor.moveToLast();
            int k = Integer.valueOf(cursor.getString(cursor.getColumnIndex("_id"))).intValue() - 1;
            Uri uri = Uri.parse((new StringBuilder()).append(android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI).append("/").append(k).toString());
            ctx.getContentResolver().delete(uri, null, null);
        }
    }

    private File createCaptureFile(int i)
    {
        File file;
        if(i == 0)
            file = new File(DirectoryManager.getTempDirectoryPath(ctx.getContext()), "Pic.jpg");
        else
        if(i == 1)
            file = new File(DirectoryManager.getTempDirectoryPath(ctx.getContext()), "Pic.png");
        else
            throw new IllegalArgumentException((new StringBuilder()).append("Invalid Encoding Type: ").append(i).toString());
        return file;
    }

    private Cursor queryImgDB()
    {
        return ctx.getContentResolver().query(android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI, new String[] {
            "_id"
        }, null, null, null);
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status;
        status = org.apache.cordova.api.PluginResult.Status.OK;
        callbackId = s1;
        if(!s.equals("takePicture")) goto _L2; else goto _L1
_L1:
        int i;
        int j;
        targetHeight = 0;
        targetWidth = 0;
        encodingType = 0;
        mediaType = 0;
        mQuality = 80;
        mQuality = jsonarray.getInt(0);
        i = jsonarray.getInt(1);
        j = jsonarray.getInt(2);
        targetWidth = jsonarray.getInt(3);
        targetHeight = jsonarray.getInt(4);
        encodingType = jsonarray.getInt(5);
        if(j != 1) goto _L4; else goto _L3
_L3:
        takePicture(i, encodingType);
_L8:
        PluginResult pluginresult;
        PluginResult pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.NO_RESULT);
        pluginresult1.setKeepCallback(true);
        pluginresult = pluginresult1;
        break; /* Loop/switch isn't completed */
_L7:
        getImage(j, i);
        if(true) goto _L6; else goto _L5
_L6:
        JSONException jsonexception;
        break; /* Loop/switch isn't completed */
_L2:
        try
        {
            pluginresult = new PluginResult(status, "");
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            jsonexception.printStackTrace();
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
        }
_L5:
        return pluginresult;
_L4:
        if(j != 0 && j != 2) goto _L8; else goto _L7
    }

    public void failPicture(String s)
    {
        error(new PluginResult(org.apache.cordova.api.PluginResult.Status.ERROR, s), callbackId);
    }

    public void getImage(int i, int j)
    {
        Intent intent;
        String s;
        intent = new Intent();
        s = "Get Picture";
        if(mediaType != 0) goto _L2; else goto _L1
_L1:
        intent.setType("image/*");
_L4:
        intent.setAction("android.intent.action.GET_CONTENT");
        intent.addCategory("android.intent.category.OPENABLE");
        ctx.startActivityForResult(this, Intent.createChooser(intent, new String(s)), 1 + (j + 16 * (i + 1)));
        return;
_L2:
        if(mediaType == 1)
        {
            intent.setType("video/*");
            s = "Get Video";
        } else
        if(mediaType == 2)
        {
            intent.setType("*/*");
            s = "Get All";
        }
        if(true) goto _L4; else goto _L3
_L3:
    }

    public void onActivityResult(int i, int j, Intent intent)
    {
        int k;
        int l;
        k = i / 16 - 1;
        l = i % 16 - 1;
        if(k != 1) goto _L2; else goto _L1
_L1:
        if(j != -1) goto _L4; else goto _L3
_L3:
        ExifHelper exifhelper;
        exifhelper = new ExifHelper();
        if(encodingType == 0)
        {
            exifhelper.createInFile((new StringBuilder()).append(DirectoryManager.getTempDirectoryPath(ctx.getContext())).append("/Pic.jpg").toString());
            exifhelper.readExifData();
        }
        Bitmap bitmap3;
        Bitmap bitmap2;
        Bitmap bitmap4;
        try
        {
            bitmap4 = android.provider.MediaStore.Images.Media.getBitmap(ctx.getContentResolver(), imageUri);
        }
        catch(FileNotFoundException filenotfoundexception1)
        {
            Uri uri1 = intent.getData();
            bitmap2 = BitmapFactory.decodeStream(ctx.getContentResolver().openInputStream(uri1));
            continue; /* Loop/switch isn't completed */
        }
        bitmap2 = bitmap4;
_L12:
        bitmap3 = scaleBitmap(bitmap2);
        if(l != 0) goto _L6; else goto _L5
_L5:
        processPicture(bitmap3);
        checkForDuplicateImage(0);
_L9:
        bitmap3.recycle();
        System.gc();
        checkForDuplicateImage(1);
          goto _L7
_L6:
        if(l != 1) goto _L9; else goto _L8
_L8:
        ContentValues contentvalues;
        contentvalues = new ContentValues();
        contentvalues.put("mime_type", "image/jpeg");
        Uri uri4 = ctx.getContentResolver().insert(android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentvalues);
        Uri uri3 = uri4;
_L10:
        IOException ioexception;
        OutputStream outputstream = ctx.getContentResolver().openOutputStream(uri3);
        bitmap3.compress(android.graphics.Bitmap.CompressFormat.JPEG, mQuality, outputstream);
        outputstream.close();
        if(encodingType == 0)
        {
            exifhelper.createOutFile(FileUtils.getRealPathFromURI(uri3, ctx));
            exifhelper.writeExifData();
        }
        success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, uri3.toString()), callbackId);
          goto _L9
        UnsupportedOperationException unsupportedoperationexception;
        unsupportedoperationexception;
        LOG.d("CameraLauncher", "Can't write to external media storage.");
        Uri uri2 = ctx.getContentResolver().insert(android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI, contentvalues);
        uri3 = uri2;
          goto _L10
        UnsupportedOperationException unsupportedoperationexception1;
        unsupportedoperationexception1;
        try
        {
            LOG.d("CameraLauncher", "Can't write to internal media storage.");
            failPicture("Error capturing image - no media storage found.");
        }
        // Misplaced declaration of an exception variable
        catch(IOException ioexception)
        {
            ioexception.printStackTrace();
            failPicture("Error capturing image.");
        }
          goto _L7
_L4:
        if(j == 0)
            failPicture("Camera cancelled.");
        else
            failPicture("Did not complete!");
          goto _L7
_L2:
        if(k == 0 || k == 2)
            if(j == -1)
            {
                Uri uri = intent.getData();
                ContentResolver contentresolver = ctx.getContentResolver();
                if(mediaType != 0)
                    success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, uri.toString()), callbackId);
                else
                if(l == 0)
                    try
                    {
                        Bitmap bitmap1 = scaleBitmap(BitmapFactory.decodeStream(contentresolver.openInputStream(uri)));
                        processPicture(bitmap1);
                        bitmap1.recycle();
                        System.gc();
                    }
                    catch(FileNotFoundException filenotfoundexception)
                    {
                        filenotfoundexception.printStackTrace();
                        failPicture("Error retrieving image.");
                    }
                else
                if(l == 1)
                    if(targetHeight > 0 && targetWidth > 0)
                        try
                        {
                            Bitmap bitmap = scaleBitmap(BitmapFactory.decodeStream(contentresolver.openInputStream(uri)));
                            String s = (new StringBuilder()).append(DirectoryManager.getTempDirectoryPath(ctx.getContext())).append("/resize.jpg").toString();
                            FileOutputStream fileoutputstream = new FileOutputStream(s);
                            bitmap.compress(android.graphics.Bitmap.CompressFormat.JPEG, mQuality, fileoutputstream);
                            fileoutputstream.close();
                            bitmap.recycle();
                            success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, (new StringBuilder()).append("file://").append(s).append("?").append(System.currentTimeMillis()).toString()), callbackId);
                            System.gc();
                        }
                        catch(Exception exception)
                        {
                            exception.printStackTrace();
                            failPicture("Error retrieving image.");
                        }
                    else
                        success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, uri.toString()), callbackId);
            } else
            if(j == 0)
                failPicture("Selection cancelled.");
            else
                failPicture("Selection did not complete!");
_L7:
        return;
        if(true) goto _L12; else goto _L11
_L11:
    }

    public void processPicture(Bitmap bitmap)
    {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        if(bitmap.compress(android.graphics.Bitmap.CompressFormat.JPEG, mQuality, bytearrayoutputstream))
        {
            String s = new String(Base64.encodeBase64(bytearrayoutputstream.toByteArray()));
            success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, s), callbackId);
        }
_L1:
        return;
        Exception exception;
        exception;
        failPicture("Error compressing image.");
          goto _L1
    }

    public Bitmap scaleBitmap(Bitmap bitmap)
    {
        int i;
        int j;
        int k;
        int l;
        i = targetWidth;
        j = targetHeight;
        k = bitmap.getWidth();
        l = bitmap.getHeight();
        if(i > 0 || j > 0) goto _L2; else goto _L1
_L1:
        Bitmap bitmap1 = bitmap;
_L4:
        return bitmap1;
_L2:
        if(i <= 0 || j > 0)
            break; /* Loop/switch isn't completed */
        j = (i * l) / k;
_L5:
        bitmap1 = Bitmap.createScaledBitmap(bitmap, i, j, true);
        if(true) goto _L4; else goto _L3
_L3:
        if(i <= 0 && j > 0)
        {
            i = (j * k) / l;
        } else
        {
            double d = (double)i / (double)j;
            double d1 = (double)k / (double)l;
            if(d1 > d)
                j = (i * l) / k;
            else
            if(d1 < d)
                i = (j * k) / l;
        }
          goto _L5
        if(true) goto _L4; else goto _L6
_L6:
    }

    public void takePicture(int i, int j)
    {
        numPics = queryImgDB().getCount();
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        File file = createCaptureFile(j);
        intent.putExtra("output", Uri.fromFile(file));
        imageUri = Uri.fromFile(file);
        ctx.startActivityForResult(this, intent, 1 + (i + 32));
    }

    private static final int ALLMEDIA = 2;
    private static final int CAMERA = 1;
    private static final int DATA_URL = 0;
    private static final int FILE_URI = 1;
    private static final String GET_All = "Get All";
    private static final String GET_PICTURE = "Get Picture";
    private static final String GET_VIDEO = "Get Video";
    private static final int JPEG = 0;
    private static final String LOG_TAG = "CameraLauncher";
    private static final int PHOTOLIBRARY = 0;
    private static final int PICTURE = 0;
    private static final int PNG = 1;
    private static final int SAVEDPHOTOALBUM = 2;
    private static final int VIDEO = 1;
    public String callbackId;
    private int encodingType;
    private Uri imageUri;
    private int mQuality;
    private int mediaType;
    private int numPics;
    private int targetHeight;
    private int targetWidth;
}
