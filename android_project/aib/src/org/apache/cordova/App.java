// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import java.util.HashMap;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

// Referenced classes of package org.apache.cordova:
//            DroidGap

public class App extends Plugin
{

    public App()
    {
    }

    public void backHistory()
    {
        ((DroidGap)ctx).backHistory();
    }

    public void cancelLoadUrl()
    {
        ((DroidGap)ctx).cancelLoadUrl();
    }

    public void clearCache()
    {
        ((DroidGap)ctx).clearCache();
    }

    public void clearHistory()
    {
        ((DroidGap)ctx).clearHistory();
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.OK;
        PluginResult pluginresult;
        if(s.equals("clearCache"))
        {
            clearCache();
        } else
        {
            if(!s.equals("loadUrl"))
                break MISSING_BLOCK_LABEL_77;
            loadUrl(jsonarray.getString(0), jsonarray.optJSONObject(1));
        }
_L1:
        JSONException jsonexception;
        pluginresult = new PluginResult(status, "");
        break MISSING_BLOCK_LABEL_189;
        try
        {
            if(s.equals("cancelLoadUrl"))
                cancelLoadUrl();
            else
            if(s.equals("clearHistory"))
                clearHistory();
            else
            if(s.equals("backHistory"))
                backHistory();
            else
            if(s.equals("overrideBackbutton"))
            {
                overrideBackbutton(jsonarray.getBoolean(0));
            } else
            {
                if(s.equals("isBackbuttonOverridden"))
                {
                    pluginresult = new PluginResult(status, isBackbuttonOverridden());
                    break MISSING_BLOCK_LABEL_189;
                }
                if(s.equals("exitApp"))
                    exitApp();
            }
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
            break MISSING_BLOCK_LABEL_189;
        }
          goto _L1
        return pluginresult;
    }

    public void exitApp()
    {
        ((DroidGap)ctx).endActivity();
    }

    public boolean isBackbuttonOverridden()
    {
        return ((DroidGap)ctx).bound;
    }

    public void loadUrl(String s, JSONObject jsonobject)
        throws JSONException
    {
        int i;
        boolean flag;
        boolean flag1;
        HashMap hashmap;
        LOG.d("App", (new StringBuilder()).append("App.loadUrl(").append(s).append(",").append(jsonobject).append(")").toString());
        i = 0;
        flag = false;
        flag1 = false;
        hashmap = new HashMap();
        if(jsonobject != null)
        {
            JSONArray jsonarray = jsonobject.names();
            int j = 0;
            while(j < jsonarray.length()) 
            {
                String s1 = jsonarray.getString(j);
                if(s1.equals("wait"))
                    i = jsonobject.getInt(s1);
                else
                if(s1.equalsIgnoreCase("openexternal"))
                    flag = jsonobject.getBoolean(s1);
                else
                if(s1.equalsIgnoreCase("clearhistory"))
                {
                    flag1 = jsonobject.getBoolean(s1);
                } else
                {
                    Object obj = jsonobject.get(s1);
                    if(obj != null)
                        if(obj.getClass().equals(java/lang/String))
                            hashmap.put(s1, (String)obj);
                        else
                        if(obj.getClass().equals(java/lang/Boolean))
                            hashmap.put(s1, (Boolean)obj);
                        else
                        if(obj.getClass().equals(java/lang/Integer))
                            hashmap.put(s1, (Integer)obj);
                }
                j++;
            }
        }
        if(i <= 0) goto _L2; else goto _L1
_L1:
        this;
        JVM INSTR monitorenter ;
        long l = i;
        wait(l);
        this;
        JVM INSTR monitorexit ;
_L2:
        ((DroidGap)ctx).showWebPage(s, flag, flag1, hashmap);
        return;
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        try
        {
            throw exception;
        }
        catch(InterruptedException interruptedexception)
        {
            interruptedexception.printStackTrace();
        }
        if(true) goto _L2; else goto _L3
_L3:
    }

    public void overrideBackbutton(boolean flag)
    {
        LOG.i("DroidGap", "WARNING: Back Button Default Behaviour will be overridden.  The backbutton event will be fired!");
        ((DroidGap)ctx).bound = flag;
    }
}
