// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.hardware.*;
import java.util.List;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

public class CompassListener extends Plugin
    implements SensorEventListener
{

    public CompassListener()
    {
        TIMEOUT = 30000L;
        heading = 0.0F;
        timeStamp = 0L;
        setStatus(STOPPED);
    }

    private JSONObject getCompassHeading()
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("magneticHeading", getHeading());
            jsonobject.put("trueHeading", getHeading());
            jsonobject.put("headingAccuracy", 0);
            jsonobject.put("timestamp", timeStamp);
        }
        catch(JSONException jsonexception) { }
        return jsonobject;
    }

    private void setStatus(int i)
    {
        status = i;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status1 = org.apache.cordova.api.PluginResult.Status.OK;
        if(!s.equals("start")) goto _L2; else goto _L1
_L1:
        start();
_L6:
        PluginResult pluginresult = new PluginResult(status1, "");
          goto _L3
_L2:
        if(!s.equals("stop")) goto _L5; else goto _L4
_L4:
        stop();
          goto _L6
        JSONException jsonexception;
        jsonexception;
        jsonexception.printStackTrace();
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
          goto _L3
_L5:
        if(!s.equals("getStatus")) goto _L8; else goto _L7
_L7:
        pluginresult = new PluginResult(status1, getStatus());
          goto _L3
_L8:
        if(!s.equals("getHeading")) goto _L10; else goto _L9
_L9:
        if(status == RUNNING) goto _L12; else goto _L11
_L11:
        if(start() != ERROR_FAILED_TO_START)
            break MISSING_BLOCK_LABEL_306;
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, ERROR_FAILED_TO_START);
          goto _L3
_L13:
        int i;
        int j;
        i = status;
        j = STARTING;
        long l;
        if(i != j || l <= 0L)
            break MISSING_BLOCK_LABEL_199;
        l -= 100L;
        Thread.sleep(100L);
          goto _L13
        InterruptedException interruptedexception;
        interruptedexception;
        interruptedexception.printStackTrace();
          goto _L13
        if(l != 0L) goto _L12; else goto _L14
_L14:
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, ERROR_FAILED_TO_START);
          goto _L3
_L12:
        pluginresult = new PluginResult(status1, getCompassHeading());
          goto _L3
_L10:
        if(!s.equals("setTimeout")) goto _L16; else goto _L15
_L15:
        setTimeout(jsonarray.getLong(0));
          goto _L6
_L16:
        if(s.equals("getTimeout"))
            pluginresult = new PluginResult(status1, getTimeout());
        else
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.INVALID_ACTION);
_L3:
        return pluginresult;
        l = 2000L;
          goto _L13
    }

    public float getHeading()
    {
        lastAccessTime = System.currentTimeMillis();
        return heading;
    }

    public int getStatus()
    {
        return status;
    }

    public long getTimeout()
    {
        return TIMEOUT;
    }

    public boolean isSynch(String s)
    {
        if(!s.equals("getStatus")) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        if(s.equals("getHeading"))
        {
            if(status == RUNNING)
            {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
        } else
        if(s.equals("getTimeout"))
        {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if(true) goto _L4; else goto _L3
_L3:
    }

    public void onAccuracyChanged(Sensor sensor, int i)
    {
    }

    public void onDestroy()
    {
        stop();
    }

    public void onSensorChanged(SensorEvent sensorevent)
    {
        float f = sensorevent.values[0];
        timeStamp = System.currentTimeMillis();
        heading = f;
        setStatus(RUNNING);
        if(timeStamp - lastAccessTime > TIMEOUT)
            stop();
    }

    public void setContext(CordovaInterface cordovainterface)
    {
        super.setContext(cordovainterface);
        sensorManager = (SensorManager)cordovainterface.getSystemService("sensor");
    }

    public void setTimeout(long l)
    {
        TIMEOUT = l;
    }

    public int start()
    {
        int i;
        if(status == RUNNING || status == STARTING)
        {
            i = status;
        } else
        {
            List list = sensorManager.getSensorList(3);
            if(list != null && list.size() > 0)
            {
                mSensor = (Sensor)list.get(0);
                sensorManager.registerListener(this, mSensor, 3);
                lastAccessTime = System.currentTimeMillis();
                setStatus(STARTING);
            } else
            {
                setStatus(ERROR_FAILED_TO_START);
            }
            i = status;
        }
        return i;
    }

    public void stop()
    {
        if(status != STOPPED)
            sensorManager.unregisterListener(this);
        setStatus(STOPPED);
    }

    public static int ERROR_FAILED_TO_START = 3;
    public static int RUNNING = 2;
    public static int STARTING = 1;
    public static int STOPPED = 0;
    public long TIMEOUT;
    int accuracy;
    float heading;
    long lastAccessTime;
    Sensor mSensor;
    private SensorManager sensorManager;
    int status;
    long timeStamp;

}
