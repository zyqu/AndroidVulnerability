// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.hardware.*;
import java.util.List;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

public class AccelListener extends Plugin
    implements SensorEventListener
{

    public AccelListener()
    {
        TIMEOUT = 30000F;
        x = 0.0F;
        y = 0.0F;
        z = 0.0F;
        timestamp = 0L;
        setStatus(STOPPED);
    }

    private void setStatus(int i)
    {
        status = i;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status1 = org.apache.cordova.api.PluginResult.Status.OK;
        if(!s.equals("getStatus")) goto _L2; else goto _L1
_L1:
        PluginResult pluginresult = new PluginResult(status1, getStatus());
          goto _L3
_L2:
        if(!s.equals("start")) goto _L5; else goto _L4
_L4:
        pluginresult = new PluginResult(status1, start());
          goto _L3
        JSONException jsonexception;
        jsonexception;
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
          goto _L3
_L5:
        if(!s.equals("stop")) goto _L7; else goto _L6
_L6:
        stop();
        pluginresult = new PluginResult(status1, 0);
          goto _L3
_L7:
        if(!s.equals("getAcceleration")) goto _L9; else goto _L8
_L8:
        if(status == RUNNING) goto _L11; else goto _L10
_L10:
        if(start() != ERROR_FAILED_TO_START)
            break MISSING_BLOCK_LABEL_436;
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, ERROR_FAILED_TO_START);
          goto _L3
_L12:
        int i;
        int j;
        i = status;
        j = STARTING;
        long l;
        if(i != j || l <= 0L)
            break MISSING_BLOCK_LABEL_203;
        l -= 100L;
        Thread.sleep(100L);
          goto _L12
        InterruptedException interruptedexception;
        interruptedexception;
        interruptedexception.printStackTrace();
          goto _L12
        if(l != 0L) goto _L11; else goto _L13
_L13:
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, ERROR_FAILED_TO_START);
          goto _L3
_L11:
        lastAccessTime = System.currentTimeMillis();
        JSONObject jsonobject = new JSONObject();
        jsonobject.put("x", x);
        jsonobject.put("y", y);
        jsonobject.put("z", z);
        jsonobject.put("timestamp", timestamp);
        pluginresult = new PluginResult(status1, jsonobject);
          goto _L3
_L9:
        boolean flag = s.equals("setTimeout");
        if(!flag) goto _L15; else goto _L14
_L14:
        setTimeout(Float.parseFloat(jsonarray.getString(0)));
        pluginresult = new PluginResult(status1, 0);
          goto _L3
        NumberFormatException numberformatexception;
        numberformatexception;
        org.apache.cordova.api.PluginResult.Status status2;
        status2 = org.apache.cordova.api.PluginResult.Status.INVALID_ACTION;
        numberformatexception.printStackTrace();
_L16:
        pluginresult = new PluginResult(status2, "");
        break; /* Loop/switch isn't completed */
        JSONException jsonexception1;
        jsonexception1;
        status2 = org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION;
        jsonexception1.printStackTrace();
        if(true) goto _L16; else goto _L3
_L15:
        if(s.equals("getTimeout"))
            pluginresult = new PluginResult(status1, getTimeout());
        else
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.INVALID_ACTION);
_L3:
        return pluginresult;
        l = 2000L;
          goto _L12
    }

    public int getStatus()
    {
        return status;
    }

    public float getTimeout()
    {
        return TIMEOUT;
    }

    public boolean isSynch(String s)
    {
        if(!s.equals("getStatus")) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        if(s.equals("getAcceleration"))
        {
            if(status == RUNNING)
            {
                flag = true;
                continue; /* Loop/switch isn't completed */
            }
        } else
        if(s.equals("getTimeout"))
        {
            flag = true;
            continue; /* Loop/switch isn't completed */
        }
        flag = false;
        if(true) goto _L4; else goto _L3
_L3:
    }

    public void onAccuracyChanged(Sensor sensor, int i)
    {
    }

    public void onDestroy()
    {
        stop();
    }

    public void onSensorChanged(SensorEvent sensorevent)
    {
_L2:
        return;
        if(sensorevent.sensor.getType() != 1 || status == STOPPED) goto _L2; else goto _L1
_L1:
        timestamp = System.currentTimeMillis();
        x = sensorevent.values[0];
        y = sensorevent.values[1];
        z = sensorevent.values[2];
        setStatus(RUNNING);
        if((float)(timestamp - lastAccessTime) > TIMEOUT)
            stop();
        if(true) goto _L2; else goto _L3
_L3:
    }

    public void setContext(CordovaInterface cordovainterface)
    {
        super.setContext(cordovainterface);
        sensorManager = (SensorManager)cordovainterface.getSystemService("sensor");
    }

    public void setTimeout(float f)
    {
        TIMEOUT = f;
    }

    public int start()
    {
        int i;
        if(status == RUNNING || status == STARTING)
        {
            i = status;
        } else
        {
            List list = sensorManager.getSensorList(1);
            if(list != null && list.size() > 0)
            {
                mSensor = (Sensor)list.get(0);
                sensorManager.registerListener(this, mSensor, 0);
                setStatus(STARTING);
                lastAccessTime = System.currentTimeMillis();
            } else
            {
                setStatus(ERROR_FAILED_TO_START);
            }
            i = status;
        }
        return i;
    }

    public void stop()
    {
        if(status != STOPPED)
            sensorManager.unregisterListener(this);
        setStatus(STOPPED);
    }

    public static int ERROR_FAILED_TO_START = 3;
    public static int RUNNING = 2;
    public static int STARTING = 1;
    public static int STOPPED = 0;
    public float TIMEOUT;
    long lastAccessTime;
    Sensor mSensor;
    private SensorManager sensorManager;
    int status;
    long timestamp;
    float x;
    float y;
    float z;

}
