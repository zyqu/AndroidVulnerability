// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.*;
import android.database.Cursor;
import android.net.Uri;
import android.os.RemoteException;
import android.util.Log;
import android.webkit.WebView;
import java.io.*;
import java.net.URL;
import java.util.*;
import org.json.*;

// Referenced classes of package org.apache.cordova:
//            ContactAccessor

public class ContactAccessorSdk5 extends ContactAccessor
{

    public ContactAccessorSdk5(WebView webview, Context context)
    {
        mApp = context;
        mView = webview;
    }

    private JSONObject addressQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("type", getAddressType(cursor.getInt(cursor.getColumnIndex("data2"))));
            jsonobject.put("formatted", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("streetAddress", cursor.getString(cursor.getColumnIndex("data4")));
            jsonobject.put("locality", cursor.getString(cursor.getColumnIndex("data7")));
            jsonobject.put("region", cursor.getString(cursor.getColumnIndex("data8")));
            jsonobject.put("postalCode", cursor.getString(cursor.getColumnIndex("data9")));
            jsonobject.put("country", cursor.getString(cursor.getColumnIndex("data10")));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private ContactAccessor.WhereOptions buildIdClause(Set set, String s)
    {
        ContactAccessor.WhereOptions whereoptions = new ContactAccessor.WhereOptions(this);
        if(s.equals("%"))
        {
            whereoptions.setWhere("(contact_id LIKE ? )");
            whereoptions.setWhereArgs(new String[] {
                s
            });
        } else
        {
            Iterator iterator = set.iterator();
            StringBuffer stringbuffer = new StringBuffer("(");
            do
            {
                if(!iterator.hasNext())
                    break;
                stringbuffer.append((new StringBuilder()).append("'").append((String)iterator.next()).append("'").toString());
                if(iterator.hasNext())
                    stringbuffer.append(",");
            } while(true);
            stringbuffer.append(")");
            whereoptions.setWhere((new StringBuilder()).append("contact_id IN ").append(stringbuffer.toString()).toString());
            whereoptions.setWhereArgs(null);
        }
        return whereoptions;
    }

    private ContactAccessor.WhereOptions buildWhereClause(JSONArray jsonarray, String s)
    {
        ArrayList arraylist;
        ArrayList arraylist1;
        ContactAccessor.WhereOptions whereoptions;
        arraylist = new ArrayList();
        arraylist1 = new ArrayList();
        whereoptions = new ContactAccessor.WhereOptions(this);
        if(!isWildCardSearch(jsonarray)) goto _L2; else goto _L1
_L1:
        if(!"%".equals(s)) goto _L4; else goto _L3
_L3:
        whereoptions.setWhere("(display_name LIKE ? )");
        whereoptions.setWhereArgs(new String[] {
            s
        });
_L5:
        return whereoptions;
_L4:
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("displayName")).append(" LIKE ? )").toString());
        arraylist1.add(s);
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("name")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/name");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("nickname")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/nickname");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("phoneNumbers")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/phone_v2");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("emails")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/email_v2");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("addresses")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/postal-address_v2");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("ims")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/im");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("organizations")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/organization");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("note")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/note");
        arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get("urls")).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
        arraylist1.add(s);
        arraylist1.add("vnd.android.cursor.item/website");
_L2:
label0:
        {
            if(!"%".equals(s))
                break label0;
            whereoptions.setWhere("(display_name LIKE ? )");
            whereoptions.setWhereArgs(new String[] {
                s
            });
        }
          goto _L5
        int i = 0;
_L8:
        if(i < jsonarray.length())
            break MISSING_BLOCK_LABEL_792;
_L7:
        StringBuffer stringbuffer;
        stringbuffer = new StringBuffer();
        for(int j = 0; j < arraylist.size(); j++)
        {
            stringbuffer.append((String)arraylist.get(j));
            if(j != arraylist.size() - 1)
                stringbuffer.append(" OR ");
        }

        break; /* Loop/switch isn't completed */
        String s1 = jsonarray.getString(i);
        if(s1.equals("id"))
        {
            arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" = ? )").toString());
            arraylist1.add(s.substring(1, s.length() - 1));
            break MISSING_BLOCK_LABEL_1822;
        }
        JSONException jsonexception;
        if(s1.startsWith("displayName"))
        {
            arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? )").toString());
            arraylist1.add(s);
            break MISSING_BLOCK_LABEL_1822;
        }
        try
        {
            if(s1.startsWith("name"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/name");
            } else
            if(s1.startsWith("nickname"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/nickname");
            } else
            if(s1.startsWith("phoneNumbers"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/phone_v2");
            } else
            if(s1.startsWith("emails"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/email_v2");
            } else
            if(s1.startsWith("addresses"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/postal-address_v2");
            } else
            if(s1.startsWith("ims"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/im");
            } else
            if(s1.startsWith("organizations"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/organization");
            } else
            if(s1.startsWith("note"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/note");
            } else
            if(s1.startsWith("urls"))
            {
                arraylist.add((new StringBuilder()).append("(").append((String)dbMap.get(s1)).append(" LIKE ? AND ").append("mimetype").append(" = ? )").toString());
                arraylist1.add(s);
                arraylist1.add("vnd.android.cursor.item/website");
            }
            break MISSING_BLOCK_LABEL_1822;
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        if(true) goto _L7; else goto _L6
_L6:
        whereoptions.setWhere(stringbuffer.toString());
        String as[] = new String[arraylist1.size()];
        for(int k = 0; k < arraylist1.size(); k++)
            as[k] = (String)arraylist1.get(k);

        whereoptions.setWhereArgs(as);
          goto _L5
        i++;
          goto _L8
    }

    private String createNewContact(JSONObject jsonobject, String s, String s1)
    {
        ArrayList arraylist;
        arraylist = new ArrayList();
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.RawContacts.CONTENT_URI).withValue("account_type", s).withValue("account_name", s1).build());
        JSONArray jsonarray6;
        int i3;
        int j3;
        try
        {
            JSONObject jsonobject1 = jsonobject.optJSONObject("name");
            String s7 = jsonobject.getString("displayName");
            if(s7 != null || jsonobject1 != null)
                arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/name").withValue("data1", s7).withValue("data3", getJsonString(jsonobject1, "familyName")).withValue("data5", getJsonString(jsonobject1, "middleName")).withValue("data2", getJsonString(jsonobject1, "givenName")).withValue("data4", getJsonString(jsonobject1, "honorificPrefix")).withValue("data6", getJsonString(jsonobject1, "honorificSuffix")).build());
        }
        catch(JSONException jsonexception)
        {
            Log.d("ContactsAccessor", "Could not get name object");
        }
        jsonarray6 = jsonobject.getJSONArray("phoneNumbers");
        if(jsonarray6 == null)
            break MISSING_BLOCK_LABEL_249;
        i3 = 0;
_L1:
        j3 = jsonarray6.length();
        if(i3 >= j3)
            break MISSING_BLOCK_LABEL_249;
        insertPhone(arraylist, (JSONObject)jsonarray6.get(i3));
        i3++;
          goto _L1
        JSONException jsonexception1;
        jsonexception1;
        Log.d("ContactsAccessor", "Could not get phone numbers");
        JSONArray jsonarray5;
        int k2;
        jsonarray5 = jsonobject.getJSONArray("emails");
        if(jsonarray5 == null)
            break MISSING_BLOCK_LABEL_312;
        k2 = 0;
_L2:
        int l2 = jsonarray5.length();
        if(k2 >= l2)
            break MISSING_BLOCK_LABEL_312;
        insertEmail(arraylist, (JSONObject)jsonarray5.get(k2));
        k2++;
          goto _L2
        JSONException jsonexception2;
        jsonexception2;
        Log.d("ContactsAccessor", "Could not get emails");
        JSONArray jsonarray4;
        int i2;
        jsonarray4 = jsonobject.getJSONArray("addresses");
        if(jsonarray4 == null)
            break MISSING_BLOCK_LABEL_375;
        i2 = 0;
_L3:
        int j2 = jsonarray4.length();
        if(i2 >= j2)
            break MISSING_BLOCK_LABEL_375;
        insertAddress(arraylist, (JSONObject)jsonarray4.get(i2));
        i2++;
          goto _L3
        JSONException jsonexception3;
        jsonexception3;
        Log.d("ContactsAccessor", "Could not get addresses");
        JSONArray jsonarray3;
        int k1;
        jsonarray3 = jsonobject.getJSONArray("organizations");
        if(jsonarray3 == null)
            break MISSING_BLOCK_LABEL_438;
        k1 = 0;
_L4:
        int l1 = jsonarray3.length();
        if(k1 >= l1)
            break MISSING_BLOCK_LABEL_438;
        insertOrganization(arraylist, (JSONObject)jsonarray3.get(k1));
        k1++;
          goto _L4
        JSONException jsonexception4;
        jsonexception4;
        Log.d("ContactsAccessor", "Could not get organizations");
        JSONArray jsonarray2;
        int i1;
        jsonarray2 = jsonobject.getJSONArray("ims");
        if(jsonarray2 == null)
            break MISSING_BLOCK_LABEL_501;
        i1 = 0;
_L5:
        int j1 = jsonarray2.length();
        if(i1 >= j1)
            break MISSING_BLOCK_LABEL_501;
        insertIm(arraylist, (JSONObject)jsonarray2.get(i1));
        i1++;
          goto _L5
        JSONException jsonexception5;
        jsonexception5;
        Log.d("ContactsAccessor", "Could not get emails");
        String s2 = getJsonString(jsonobject, "note");
        if(s2 != null)
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/note").withValue("data1", s2).build());
        String s3 = getJsonString(jsonobject, "nickname");
        if(s3 != null)
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/nickname").withValue("data1", s3).build());
        JSONArray jsonarray1;
        int k;
        jsonarray1 = jsonobject.getJSONArray("websites");
        if(jsonarray1 == null)
            break MISSING_BLOCK_LABEL_669;
        k = 0;
_L6:
        int l = jsonarray1.length();
        if(k >= l)
            break MISSING_BLOCK_LABEL_669;
        insertWebsite(arraylist, (JSONObject)jsonarray1.get(k));
        k++;
          goto _L6
        JSONException jsonexception6;
        jsonexception6;
        Log.d("ContactsAccessor", "Could not get websites");
        String s4 = getJsonString(jsonobject, "birthday");
        if(s4 != null)
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/contact_event").withValue("data2", Integer.valueOf(3)).withValue("data1", s4).build());
        JSONArray jsonarray;
        int i;
        jsonarray = jsonobject.getJSONArray("photos");
        if(jsonarray == null)
            break MISSING_BLOCK_LABEL_793;
        i = 0;
_L7:
        int j = jsonarray.length();
        if(i >= j)
            break MISSING_BLOCK_LABEL_793;
        insertPhoto(arraylist, (JSONObject)jsonarray.get(i));
        i++;
          goto _L7
        JSONException jsonexception7;
        jsonexception7;
        Log.d("ContactsAccessor", "Could not get photos");
        String s5 = null;
        String s6;
        ContentProviderResult acontentproviderresult[] = mApp.getContentResolver().applyBatch("com.android.contacts", arraylist);
        if(acontentproviderresult.length < 0)
            break MISSING_BLOCK_LABEL_835;
        s6 = acontentproviderresult[0].uri.getLastPathSegment();
        s5 = s6;
_L9:
        return s5;
        RemoteException remoteexception;
        remoteexception;
        Log.e("ContactsAccessor", remoteexception.getMessage(), remoteexception);
        continue; /* Loop/switch isn't completed */
        OperationApplicationException operationapplicationexception;
        operationapplicationexception;
        Log.e("ContactsAccessor", operationapplicationexception.getMessage(), operationapplicationexception);
        if(true) goto _L9; else goto _L8
_L8:
    }

    private JSONObject emailQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("value", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("type", getContactType(cursor.getInt(cursor.getColumnIndex("data2"))));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private int getAddressType(String s)
    {
        if(s == null) goto _L2; else goto _L1
_L1:
        if(!"work".equals(s.toLowerCase())) goto _L4; else goto _L3
_L3:
        byte byte0 = 2;
_L6:
        return byte0;
_L4:
        if("other".equals(s.toLowerCase()))
        {
            byte0 = 3;
            continue; /* Loop/switch isn't completed */
        }
        if("home".equals(s.toLowerCase()))
        {
            byte0 = 1;
            continue; /* Loop/switch isn't completed */
        }
_L2:
        byte0 = 3;
        if(true) goto _L6; else goto _L5
_L5:
    }

    private String getAddressType(int i)
    {
        i;
        JVM INSTR tableswitch 1 2: default 24
    //                   1 30
    //                   2 37;
           goto _L1 _L2 _L3
_L1:
        String s = "other";
_L5:
        return s;
_L2:
        s = "home";
        continue; /* Loop/switch isn't completed */
_L3:
        s = "work";
        if(true) goto _L5; else goto _L4
_L4:
    }

    private int getContactType(String s)
    {
        if(s == null) goto _L2; else goto _L1
_L1:
        if(!"home".equals(s.toLowerCase())) goto _L4; else goto _L3
_L3:
        int i = 1;
_L6:
        return i;
_L4:
        if("work".equals(s.toLowerCase()))
        {
            i = 2;
            continue; /* Loop/switch isn't completed */
        }
        if("other".equals(s.toLowerCase()))
        {
            i = 3;
            continue; /* Loop/switch isn't completed */
        }
        if("mobile".equals(s.toLowerCase()))
        {
            i = 4;
            continue; /* Loop/switch isn't completed */
        }
        if("custom".equals(s.toLowerCase()))
        {
            i = 0;
            continue; /* Loop/switch isn't completed */
        }
_L2:
        i = 3;
        if(true) goto _L6; else goto _L5
_L5:
    }

    private String getContactType(int i)
    {
        i;
        JVM INSTR tableswitch 0 4: default 36
    //                   0 42
    //                   1 49
    //                   2 56
    //                   3 36
    //                   4 63;
           goto _L1 _L2 _L3 _L4 _L1 _L5
_L1:
        String s = "other";
_L7:
        return s;
_L2:
        s = "custom";
        continue; /* Loop/switch isn't completed */
_L3:
        s = "home";
        continue; /* Loop/switch isn't completed */
_L4:
        s = "work";
        continue; /* Loop/switch isn't completed */
_L5:
        s = "mobile";
        if(true) goto _L7; else goto _L6
_L6:
    }

    private int getOrgType(String s)
    {
        if(s == null) goto _L2; else goto _L1
_L1:
        if(!"work".equals(s.toLowerCase())) goto _L4; else goto _L3
_L3:
        int i = 1;
_L6:
        return i;
_L4:
        if("other".equals(s.toLowerCase()))
        {
            i = 2;
            continue; /* Loop/switch isn't completed */
        }
        if("custom".equals(s.toLowerCase()))
        {
            i = 0;
            continue; /* Loop/switch isn't completed */
        }
_L2:
        i = 2;
        if(true) goto _L6; else goto _L5
_L5:
    }

    private String getOrgType(int i)
    {
        i;
        JVM INSTR tableswitch 0 1: default 24
    //                   0 30
    //                   1 37;
           goto _L1 _L2 _L3
_L1:
        String s = "other";
_L5:
        return s;
_L2:
        s = "custom";
        continue; /* Loop/switch isn't completed */
_L3:
        s = "work";
        if(true) goto _L5; else goto _L4
_L4:
    }

    private InputStream getPathFromUri(String s)
        throws IOException
    {
        Object obj;
        if(s.startsWith("content:"))
        {
            Uri uri = Uri.parse(s);
            obj = mApp.getContentResolver().openInputStream(uri);
        } else
        if(s.startsWith("http:") || s.startsWith("file:"))
            obj = (new URL(s)).openStream();
        else
            obj = new FileInputStream(s);
        return ((InputStream) (obj));
    }

    private int getPhoneType(String s)
    {
        int i;
        if("home".equals(s.toLowerCase()))
            i = 1;
        else
        if("mobile".equals(s.toLowerCase()))
            i = 2;
        else
        if("work".equals(s.toLowerCase()))
            i = 3;
        else
        if("work fax".equals(s.toLowerCase()))
            i = 4;
        else
        if("home fax".equals(s.toLowerCase()))
            i = 5;
        else
        if("fax".equals(s.toLowerCase()))
            i = 4;
        else
        if("pager".equals(s.toLowerCase()))
            i = 6;
        else
        if("other".equals(s.toLowerCase()))
            i = 7;
        else
        if("car".equals(s.toLowerCase()))
            i = 9;
        else
        if("company main".equals(s.toLowerCase()))
            i = 10;
        else
        if("isdn".equals(s.toLowerCase()))
            i = 11;
        else
        if("main".equals(s.toLowerCase()))
            i = 12;
        else
        if("other fax".equals(s.toLowerCase()))
            i = 13;
        else
        if("radio".equals(s.toLowerCase()))
            i = 14;
        else
        if("telex".equals(s.toLowerCase()))
            i = 15;
        else
        if("work mobile".equals(s.toLowerCase()))
            i = 17;
        else
        if("work pager".equals(s.toLowerCase()))
            i = 18;
        else
        if("assistant".equals(s.toLowerCase()))
            i = 19;
        else
        if("mms".equals(s.toLowerCase()))
            i = 20;
        else
        if("callback".equals(s.toLowerCase()))
            i = 8;
        else
        if("tty ttd".equals(s.toLowerCase()))
            i = 16;
        else
        if("custom".equals(s.toLowerCase()))
            i = 0;
        else
            i = 7;
        return i;
    }

    private String getPhoneType(int i)
    {
        i;
        JVM INSTR tableswitch 0 20: default 100
    //                   0 106
    //                   1 127
    //                   2 134
    //                   3 148
    //                   4 120
    //                   5 113
    //                   6 141
    //                   7 100
    //                   8 155
    //                   9 162
    //                   10 169
    //                   11 232
    //                   12 100
    //                   13 176
    //                   14 183
    //                   15 190
    //                   16 197
    //                   17 204
    //                   18 211
    //                   19 218
    //                   20 225;
           goto _L1 _L2 _L3 _L4 _L5 _L6 _L7 _L8 _L1 _L9 _L10 _L11 _L12 _L1 _L13 _L14 _L15 _L16 _L17 _L18 _L19 _L20
_L1:
        String s = "other";
_L22:
        return s;
_L2:
        s = "custom";
        continue; /* Loop/switch isn't completed */
_L7:
        s = "home fax";
        continue; /* Loop/switch isn't completed */
_L6:
        s = "work fax";
        continue; /* Loop/switch isn't completed */
_L3:
        s = "home";
        continue; /* Loop/switch isn't completed */
_L4:
        s = "mobile";
        continue; /* Loop/switch isn't completed */
_L8:
        s = "pager";
        continue; /* Loop/switch isn't completed */
_L5:
        s = "work";
        continue; /* Loop/switch isn't completed */
_L9:
        s = "callback";
        continue; /* Loop/switch isn't completed */
_L10:
        s = "car";
        continue; /* Loop/switch isn't completed */
_L11:
        s = "company main";
        continue; /* Loop/switch isn't completed */
_L13:
        s = "other fax";
        continue; /* Loop/switch isn't completed */
_L14:
        s = "radio";
        continue; /* Loop/switch isn't completed */
_L15:
        s = "telex";
        continue; /* Loop/switch isn't completed */
_L16:
        s = "tty tdd";
        continue; /* Loop/switch isn't completed */
_L17:
        s = "work mobile";
        continue; /* Loop/switch isn't completed */
_L18:
        s = "work pager";
        continue; /* Loop/switch isn't completed */
_L19:
        s = "assistant";
        continue; /* Loop/switch isn't completed */
_L20:
        s = "mms";
        continue; /* Loop/switch isn't completed */
_L12:
        s = "isdn";
        if(true) goto _L22; else goto _L21
_L21:
    }

    private byte[] getPhotoBytes(String s)
    {
        ByteArrayOutputStream bytearrayoutputstream = new ByteArrayOutputStream();
        long l = 0L;
        try
        {
            byte abyte0[] = new byte[8192];
            InputStream inputstream = getPathFromUri(s);
            do
            {
                int i = inputstream.read(abyte0, 0, abyte0.length);
                if(i == -1 || l > 0x100000L)
                    break;
                bytearrayoutputstream.write(abyte0, 0, i);
                l += i;
            } while(true);
            inputstream.close();
            bytearrayoutputstream.flush();
        }
        catch(FileNotFoundException filenotfoundexception)
        {
            Log.e("ContactsAccessor", filenotfoundexception.getMessage(), filenotfoundexception);
        }
        catch(IOException ioexception)
        {
            Log.e("ContactsAccessor", ioexception.getMessage(), ioexception);
        }
        return bytearrayoutputstream.toByteArray();
    }

    private JSONObject imQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("value", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("type", getContactType(cursor.getInt(cursor.getColumnIndex("data2"))));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private void insertAddress(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/postal-address_v2").withValue("data2", Integer.valueOf(getAddressType(getJsonString(jsonobject, "type")))).withValue("data1", getJsonString(jsonobject, "formatted")).withValue("data4", getJsonString(jsonobject, "streetAddress")).withValue("data7", getJsonString(jsonobject, "locality")).withValue("data8", getJsonString(jsonobject, "region")).withValue("data9", getJsonString(jsonobject, "postalCode")).withValue("data10", getJsonString(jsonobject, "country")).build());
    }

    private void insertEmail(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/email_v2").withValue("data1", getJsonString(jsonobject, "value")).withValue("data2", Integer.valueOf(getPhoneType(getJsonString(jsonobject, "type")))).build());
    }

    private void insertIm(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/im").withValue("data1", getJsonString(jsonobject, "value")).withValue("data2", Integer.valueOf(getContactType(getJsonString(jsonobject, "type")))).build());
    }

    private void insertOrganization(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/organization").withValue("data2", Integer.valueOf(getOrgType(getJsonString(jsonobject, "type")))).withValue("data5", getJsonString(jsonobject, "department")).withValue("data1", getJsonString(jsonobject, "name")).withValue("data4", getJsonString(jsonobject, "title")).build());
    }

    private void insertPhone(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/phone_v2").withValue("data1", getJsonString(jsonobject, "value")).withValue("data2", Integer.valueOf(getPhoneType(getJsonString(jsonobject, "type")))).build());
    }

    private void insertPhoto(ArrayList arraylist, JSONObject jsonobject)
    {
        byte abyte0[] = getPhotoBytes(getJsonString(jsonobject, "value"));
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("is_super_primary", Integer.valueOf(1)).withValue("mimetype", "vnd.android.cursor.item/photo").withValue("data15", abyte0).build());
    }

    private void insertWebsite(ArrayList arraylist, JSONObject jsonobject)
    {
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValueBackReference("raw_contact_id", 0).withValue("mimetype", "vnd.android.cursor.item/website").withValue("data1", getJsonString(jsonobject, "value")).withValue("data2", Integer.valueOf(getContactType(getJsonString(jsonobject, "type")))).build());
    }

    private boolean isWildCardSearch(JSONArray jsonarray)
    {
        if(jsonarray.length() != 1) goto _L2; else goto _L1
_L1:
        boolean flag;
        boolean flag1;
        try
        {
            flag1 = "*".equals(jsonarray.getString(0));
        }
        catch(JSONException jsonexception)
        {
            flag = false;
            continue; /* Loop/switch isn't completed */
        }
        if(!flag1) goto _L2; else goto _L3
_L3:
        flag = true;
_L5:
        return flag;
_L2:
        flag = false;
        if(true) goto _L5; else goto _L4
_L4:
    }

    private String modifyContact(String s, JSONObject jsonobject, String s1, String s2)
    {
        int i;
        ArrayList arraylist;
        JSONObject jsonobject7;
        String s13;
        i = (new Integer(getJsonString(jsonobject, "rawId"))).intValue();
        arraylist = new ArrayList();
        arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.RawContacts.CONTENT_URI).withValue("account_type", s1).withValue("account_name", s2).build());
        JSONArray jsonarray6;
        int j3;
        int k3;
        ContentValues contentvalues6;
        try
        {
            String s14 = getJsonString(jsonobject, "displayName");
            JSONObject jsonobject8 = jsonobject.getJSONObject("name");
            if(s14 != null || jsonobject8 != null)
            {
                android.content.ContentProviderOperation.Builder builder1 = ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("contact_id=? AND mimetype=?", new String[] {
                    s, "vnd.android.cursor.item/name"
                });
                if(s14 != null)
                    builder1.withValue("data1", s14);
                String s15 = getJsonString(jsonobject8, "familyName");
                if(s15 != null)
                    builder1.withValue("data3", s15);
                String s16 = getJsonString(jsonobject8, "middleName");
                if(s16 != null)
                    builder1.withValue("data5", s16);
                String s17 = getJsonString(jsonobject8, "givenName");
                if(s17 != null)
                    builder1.withValue("data2", s17);
                String s18 = getJsonString(jsonobject8, "honorificPrefix");
                if(s18 != null)
                    builder1.withValue("data4", s18);
                String s19 = getJsonString(jsonobject8, "honorificSuffix");
                if(s19 != null)
                    builder1.withValue("data6", s19);
                arraylist.add(builder1.build());
            }
        }
        catch(JSONException jsonexception)
        {
            Log.d("ContactsAccessor", "Could not get name");
        }
        jsonarray6 = jsonobject.getJSONArray("phoneNumbers");
        if(jsonarray6 == null)
            break MISSING_BLOCK_LABEL_522;
        j3 = 0;
_L1:
        k3 = jsonarray6.length();
        if(j3 >= k3)
            break MISSING_BLOCK_LABEL_522;
        jsonobject7 = (JSONObject)jsonarray6.get(j3);
        s13 = getJsonString(jsonobject7, "id");
        if(s13 != null)
            break MISSING_BLOCK_LABEL_438;
        contentvalues6 = new ContentValues();
        contentvalues6.put("raw_contact_id", Integer.valueOf(i));
        contentvalues6.put("mimetype", "vnd.android.cursor.item/phone_v2");
        contentvalues6.put("data1", getJsonString(jsonobject7, "value"));
        contentvalues6.put("data2", Integer.valueOf(getPhoneType(getJsonString(jsonobject7, "type"))));
        arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues6).build());
_L2:
        j3++;
          goto _L1
        arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
            s13, "vnd.android.cursor.item/phone_v2"
        }).withValue("data1", getJsonString(jsonobject7, "value")).withValue("data2", Integer.valueOf(getPhoneType(getJsonString(jsonobject7, "type")))).build());
          goto _L2
        JSONException jsonexception1;
        jsonexception1;
        Log.d("ContactsAccessor", "Could not get phone numbers");
        JSONArray jsonarray5 = jsonobject.getJSONArray("emails");
        if(jsonarray5 == null) goto _L4; else goto _L3
_L3:
        int l2 = 0;
_L25:
        int i3 = jsonarray5.length();
        if(l2 >= i3) goto _L4; else goto _L5
_L5:
        JSONObject jsonobject6 = (JSONObject)jsonarray5.get(l2);
        String s12 = getJsonString(jsonobject6, "id");
        if(s12 == null)
        {
            ContentValues contentvalues5 = new ContentValues();
            contentvalues5.put("raw_contact_id", Integer.valueOf(i));
            contentvalues5.put("mimetype", "vnd.android.cursor.item/email_v2");
            contentvalues5.put("data1", getJsonString(jsonobject6, "value"));
            contentvalues5.put("data2", Integer.valueOf(getContactType(getJsonString(jsonobject6, "type"))));
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues5).build());
        } else
        {
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                s12, "vnd.android.cursor.item/email_v2"
            }).withValue("data1", getJsonString(jsonobject6, "value")).withValue("data2", Integer.valueOf(getContactType(getJsonString(jsonobject6, "type")))).build());
        }
          goto _L6
        JSONException jsonexception2;
        jsonexception2;
        Log.d("ContactsAccessor", "Could not get emails");
_L4:
        JSONArray jsonarray4 = jsonobject.getJSONArray("addresses");
        if(jsonarray4 == null) goto _L8; else goto _L7
_L7:
        int j2 = 0;
_L26:
        int k2 = jsonarray4.length();
        if(j2 >= k2) goto _L8; else goto _L9
_L9:
        JSONObject jsonobject5 = (JSONObject)jsonarray4.get(j2);
        String s11 = getJsonString(jsonobject5, "id");
        if(s11 == null)
        {
            ContentValues contentvalues4 = new ContentValues();
            contentvalues4.put("raw_contact_id", Integer.valueOf(i));
            contentvalues4.put("mimetype", "vnd.android.cursor.item/postal-address_v2");
            contentvalues4.put("data2", Integer.valueOf(getAddressType(getJsonString(jsonobject5, "type"))));
            contentvalues4.put("data1", getJsonString(jsonobject5, "formatted"));
            contentvalues4.put("data4", getJsonString(jsonobject5, "streetAddress"));
            contentvalues4.put("data7", getJsonString(jsonobject5, "locality"));
            contentvalues4.put("data8", getJsonString(jsonobject5, "region"));
            contentvalues4.put("data9", getJsonString(jsonobject5, "postalCode"));
            contentvalues4.put("data10", getJsonString(jsonobject5, "country"));
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues4).build());
        } else
        {
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                s11, "vnd.android.cursor.item/postal-address_v2"
            }).withValue("data2", Integer.valueOf(getAddressType(getJsonString(jsonobject5, "type")))).withValue("data1", getJsonString(jsonobject5, "formatted")).withValue("data4", getJsonString(jsonobject5, "streetAddress")).withValue("data7", getJsonString(jsonobject5, "locality")).withValue("data8", getJsonString(jsonobject5, "region")).withValue("data9", getJsonString(jsonobject5, "postalCode")).withValue("data10", getJsonString(jsonobject5, "country")).build());
        }
          goto _L10
        JSONException jsonexception3;
        jsonexception3;
        Log.d("ContactsAccessor", "Could not get addresses");
_L8:
        JSONArray jsonarray3 = jsonobject.getJSONArray("organizations");
        if(jsonarray3 == null) goto _L12; else goto _L11
_L11:
        int l1 = 0;
_L27:
        int i2 = jsonarray3.length();
        if(l1 >= i2) goto _L12; else goto _L13
_L13:
        JSONObject jsonobject4 = (JSONObject)jsonarray3.get(l1);
        String s10 = getJsonString(jsonobject4, "id");
        if(s10 == null)
        {
            ContentValues contentvalues3 = new ContentValues();
            contentvalues3.put("raw_contact_id", Integer.valueOf(i));
            contentvalues3.put("mimetype", "vnd.android.cursor.item/organization");
            contentvalues3.put("data2", Integer.valueOf(getOrgType(getJsonString(jsonobject4, "type"))));
            contentvalues3.put("data5", getJsonString(jsonobject4, "department"));
            contentvalues3.put("data1", getJsonString(jsonobject4, "name"));
            contentvalues3.put("data4", getJsonString(jsonobject4, "title"));
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues3).build());
        } else
        {
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                s10, "vnd.android.cursor.item/organization"
            }).withValue("data2", Integer.valueOf(getOrgType(getJsonString(jsonobject4, "type")))).withValue("data5", getJsonString(jsonobject4, "department")).withValue("data1", getJsonString(jsonobject4, "name")).withValue("data4", getJsonString(jsonobject4, "title")).build());
        }
          goto _L14
        JSONException jsonexception4;
        jsonexception4;
        Log.d("ContactsAccessor", "Could not get organizations");
_L12:
        JSONArray jsonarray2 = jsonobject.getJSONArray("ims");
        if(jsonarray2 == null) goto _L16; else goto _L15
_L15:
        int j1 = 0;
_L28:
        int k1 = jsonarray2.length();
        if(j1 >= k1) goto _L16; else goto _L17
_L17:
        JSONObject jsonobject3 = (JSONObject)jsonarray2.get(j1);
        String s9 = getJsonString(jsonobject3, "id");
        if(s9 == null)
        {
            ContentValues contentvalues2 = new ContentValues();
            contentvalues2.put("raw_contact_id", Integer.valueOf(i));
            contentvalues2.put("mimetype", "vnd.android.cursor.item/im");
            contentvalues2.put("data1", getJsonString(jsonobject3, "value"));
            contentvalues2.put("data2", Integer.valueOf(getContactType(getJsonString(jsonobject3, "type"))));
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues2).build());
        } else
        {
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                s9, "vnd.android.cursor.item/im"
            }).withValue("data1", getJsonString(jsonobject3, "value")).withValue("data2", Integer.valueOf(getContactType(getJsonString(jsonobject3, "type")))).build());
        }
          goto _L18
        JSONException jsonexception5;
        jsonexception5;
        Log.d("ContactsAccessor", "Could not get emails");
_L16:
        String s3 = getJsonString(jsonobject, "note");
        arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("contact_id=? AND mimetype=?", new String[] {
            s, "vnd.android.cursor.item/note"
        }).withValue("data1", s3).build());
        String s4 = getJsonString(jsonobject, "nickname");
        if(s4 != null)
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("contact_id=? AND mimetype=?", new String[] {
                s, "vnd.android.cursor.item/nickname"
            }).withValue("data1", s4).build());
        JSONArray jsonarray1 = jsonobject.getJSONArray("websites");
        if(jsonarray1 == null) goto _L20; else goto _L19
_L19:
        int l = 0;
_L29:
        int i1 = jsonarray1.length();
        if(l >= i1) goto _L20; else goto _L21
_L21:
        JSONObject jsonobject2 = (JSONObject)jsonarray1.get(l);
        String s8 = getJsonString(jsonobject2, "id");
        if(s8 == null)
        {
            ContentValues contentvalues1 = new ContentValues();
            contentvalues1.put("raw_contact_id", Integer.valueOf(i));
            contentvalues1.put("mimetype", "vnd.android.cursor.item/website");
            contentvalues1.put("data1", getJsonString(jsonobject2, "value"));
            contentvalues1.put("data2", Integer.valueOf(getContactType(getJsonString(jsonobject2, "type"))));
            arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues1).build());
        } else
        {
            arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                s8, "vnd.android.cursor.item/website"
            }).withValue("data1", getJsonString(jsonobject2, "value")).withValue("data2", Integer.valueOf(getContactType(getJsonString(jsonobject2, "type")))).build());
        }
          goto _L22
        JSONException jsonexception6;
        jsonexception6;
        Log.d("ContactsAccessor", "Could not get websites");
_L20:
        String s5 = getJsonString(jsonobject, "birthday");
        if(s5 != null)
        {
            android.content.ContentProviderOperation.Builder builder = ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI);
            String as[] = new String[3];
            as[0] = s;
            as[1] = "vnd.android.cursor.item/contact_event";
            as[2] = new String("3");
            arraylist.add(builder.withSelection("contact_id=? AND mimetype=? AND data2=?", as).withValue("data2", Integer.valueOf(3)).withValue("data1", s5).build());
        }
        JSONArray jsonarray = jsonobject.getJSONArray("photos");
        if(jsonarray == null) goto _L24; else goto _L23
_L23:
        int j = 0;
_L30:
        int k = jsonarray.length();
        if(j < k)
        {
            JSONObject jsonobject1 = (JSONObject)jsonarray.get(j);
            String s7 = getJsonString(jsonobject1, "id");
            byte abyte0[] = getPhotoBytes(getJsonString(jsonobject1, "value"));
            if(s7 == null)
            {
                ContentValues contentvalues = new ContentValues();
                contentvalues.put("raw_contact_id", Integer.valueOf(i));
                contentvalues.put("mimetype", "vnd.android.cursor.item/photo");
                contentvalues.put("is_super_primary", Integer.valueOf(1));
                contentvalues.put("data15", abyte0);
                arraylist.add(ContentProviderOperation.newInsert(android.provider.ContactsContract.Data.CONTENT_URI).withValues(contentvalues).build());
            } else
            {
                arraylist.add(ContentProviderOperation.newUpdate(android.provider.ContactsContract.Data.CONTENT_URI).withSelection("_id=? AND mimetype=?", new String[] {
                    s7, "vnd.android.cursor.item/photo"
                }).withValue("is_super_primary", Integer.valueOf(1)).withValue("data15", abyte0).build());
            }
            break MISSING_BLOCK_LABEL_2440;
        }
          goto _L24
        JSONException jsonexception7;
        jsonexception7;
        Log.d("ContactsAccessor", "Could not get photos");
_L24:
        boolean flag = true;
        String s6;
        try
        {
            mApp.getContentResolver().applyBatch("com.android.contacts", arraylist);
        }
        catch(RemoteException remoteexception)
        {
            Log.e("ContactsAccessor", remoteexception.getMessage(), remoteexception);
            Log.e("ContactsAccessor", Log.getStackTraceString(remoteexception), remoteexception);
            flag = false;
        }
        catch(OperationApplicationException operationapplicationexception)
        {
            Log.e("ContactsAccessor", operationapplicationexception.getMessage(), operationapplicationexception);
            Log.e("ContactsAccessor", Log.getStackTraceString(operationapplicationexception), operationapplicationexception);
            flag = false;
        }
        if(flag)
            s6 = s;
        else
            s6 = null;
        return s6;
_L6:
        l2++;
          goto _L25
_L10:
        j2++;
          goto _L26
_L14:
        l1++;
          goto _L27
_L18:
        j1++;
          goto _L28
_L22:
        l++;
          goto _L29
        j++;
          goto _L30
    }

    private JSONObject nameQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            String s = cursor.getString(cursor.getColumnIndex("data3"));
            String s1 = cursor.getString(cursor.getColumnIndex("data2"));
            String s2 = cursor.getString(cursor.getColumnIndex("data5"));
            String s3 = cursor.getString(cursor.getColumnIndex("data4"));
            String s4 = cursor.getString(cursor.getColumnIndex("data6"));
            StringBuffer stringbuffer = new StringBuffer("");
            if(s3 != null)
                stringbuffer.append((new StringBuilder()).append(s3).append(" ").toString());
            if(s1 != null)
                stringbuffer.append((new StringBuilder()).append(s1).append(" ").toString());
            if(s2 != null)
                stringbuffer.append((new StringBuilder()).append(s2).append(" ").toString());
            if(s != null)
                stringbuffer.append((new StringBuilder()).append(s).append(" ").toString());
            if(s4 != null)
                stringbuffer.append((new StringBuilder()).append(s4).append(" ").toString());
            jsonobject.put("familyName", s);
            jsonobject.put("givenName", s1);
            jsonobject.put("middleName", s2);
            jsonobject.put("honorificPrefix", s3);
            jsonobject.put("honorificSuffix", s4);
            jsonobject.put("formatted", stringbuffer);
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private JSONObject organizationQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("type", getOrgType(cursor.getInt(cursor.getColumnIndex("data2"))));
            jsonobject.put("department", cursor.getString(cursor.getColumnIndex("data5")));
            jsonobject.put("name", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("title", cursor.getString(cursor.getColumnIndex("data4")));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private JSONObject phoneQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("value", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("type", getPhoneType(cursor.getInt(cursor.getColumnIndex("data2"))));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        catch(Exception exception)
        {
            Log.e("ContactsAccessor", exception.getMessage(), exception);
        }
        return jsonobject;
    }

    private JSONObject photoQuery(Cursor cursor, String s)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("type", "url");
            jsonobject.put("value", Uri.withAppendedPath(ContentUris.withAppendedId(android.provider.ContactsContract.Contacts.CONTENT_URI, (new Long(s)).longValue()), "photo").toString());
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private JSONObject populateContact(JSONObject jsonobject, JSONArray jsonarray, JSONArray jsonarray1, JSONArray jsonarray2, JSONArray jsonarray3, JSONArray jsonarray4, JSONArray jsonarray5, 
            JSONArray jsonarray6)
    {
        try
        {
            if(jsonarray.length() > 0)
                jsonobject.put("organizations", jsonarray);
            if(jsonarray1.length() > 0)
                jsonobject.put("addresses", jsonarray1);
            if(jsonarray2.length() > 0)
                jsonobject.put("phoneNumbers", jsonarray2);
            if(jsonarray3.length() > 0)
                jsonobject.put("emails", jsonarray3);
            if(jsonarray4.length() > 0)
                jsonobject.put("ims", jsonarray4);
            if(jsonarray5.length() > 0)
                jsonobject.put("websites", jsonarray5);
            if(jsonarray6.length() > 0)
                jsonobject.put("photos", jsonarray6);
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    private JSONArray populateContactArray(int i, HashMap hashmap, Cursor cursor)
    {
        String s;
        String s1;
        boolean flag;
        JSONArray jsonarray;
        JSONObject jsonobject;
        JSONArray jsonarray1;
        JSONArray jsonarray2;
        JSONArray jsonarray3;
        JSONArray jsonarray4;
        JSONArray jsonarray5;
        JSONArray jsonarray6;
        JSONArray jsonarray7;
        s = "";
        s1 = "";
        flag = true;
        jsonarray = new JSONArray();
        jsonobject = new JSONObject();
        jsonarray1 = new JSONArray();
        jsonarray2 = new JSONArray();
        jsonarray3 = new JSONArray();
        jsonarray4 = new JSONArray();
        jsonarray5 = new JSONArray();
        jsonarray6 = new JSONArray();
        jsonarray7 = new JSONArray();
        if(cursor.getCount() <= 0) goto _L2; else goto _L1
_L1:
        if(!cursor.moveToNext() || jsonarray.length() > i - 1) goto _L4; else goto _L3
_L3:
        String s2;
        JSONObject jsonobject1;
        s = cursor.getString(cursor.getColumnIndex("contact_id"));
        s2 = cursor.getString(cursor.getColumnIndex("raw_contact_id"));
        if(cursor.getPosition() == 0)
            s1 = s;
        if(s1.equals(s))
            break MISSING_BLOCK_LABEL_312;
        jsonarray.put(populateContact(jsonobject, jsonarray1, jsonarray2, jsonarray3, jsonarray4, jsonarray5, jsonarray6, jsonarray7));
        jsonobject1 = new JSONObject();
        JSONException jsonexception1;
        JSONArray jsonarray8;
        JSONArray jsonarray9;
        JSONArray jsonarray10;
        JSONArray jsonarray11;
        JSONArray jsonarray12;
        JSONArray jsonarray13;
        JSONException jsonexception;
        String s3;
        JSONArray jsonarray14;
        try
        {
            jsonarray8 = new JSONArray();
        }
        catch(JSONException jsonexception8)
        {
            jsonexception1 = jsonexception8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            jsonarray9 = new JSONArray();
        }
        catch(JSONException jsonexception7)
        {
            jsonexception1 = jsonexception7;
            jsonarray1 = jsonarray8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            jsonarray10 = new JSONArray();
        }
        catch(JSONException jsonexception6)
        {
            jsonexception1 = jsonexception6;
            jsonarray2 = jsonarray9;
            jsonarray1 = jsonarray8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            jsonarray11 = new JSONArray();
        }
        catch(JSONException jsonexception5)
        {
            jsonexception1 = jsonexception5;
            jsonarray3 = jsonarray10;
            jsonarray2 = jsonarray9;
            jsonarray1 = jsonarray8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            jsonarray12 = new JSONArray();
        }
        catch(JSONException jsonexception4)
        {
            jsonexception1 = jsonexception4;
            jsonarray4 = jsonarray11;
            jsonarray3 = jsonarray10;
            jsonarray2 = jsonarray9;
            jsonarray1 = jsonarray8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            jsonarray13 = new JSONArray();
        }
        catch(JSONException jsonexception3)
        {
            jsonexception1 = jsonexception3;
            jsonarray5 = jsonarray12;
            jsonarray4 = jsonarray11;
            jsonarray3 = jsonarray10;
            jsonarray2 = jsonarray9;
            jsonarray1 = jsonarray8;
            jsonobject = jsonobject1;
            continue; /* Loop/switch isn't completed */
        }
        jsonarray14 = new JSONArray();
        flag = true;
        jsonarray7 = jsonarray14;
        jsonarray6 = jsonarray13;
        jsonarray5 = jsonarray12;
        jsonarray4 = jsonarray11;
        jsonarray3 = jsonarray10;
        jsonarray2 = jsonarray9;
        jsonarray1 = jsonarray8;
        jsonobject = jsonobject1;
        if(!flag)
            break MISSING_BLOCK_LABEL_341;
        flag = false;
        jsonobject.put("id", s);
        jsonobject.put("rawId", s2);
        s3 = cursor.getString(cursor.getColumnIndex("mimetype"));
        if(s3.equals("vnd.android.cursor.item/name"))
            jsonobject.put("displayName", cursor.getString(cursor.getColumnIndex("data1")));
        if(!s3.equals("vnd.android.cursor.item/name") || !isRequired("name", hashmap)) goto _L6; else goto _L5
_L5:
        jsonobject.put("name", nameQuery(cursor));
          goto _L7
_L6:
        if(!s3.equals("vnd.android.cursor.item/phone_v2") || !isRequired("phoneNumbers", hashmap)) goto _L9; else goto _L8
_L8:
        jsonarray3.put(phoneQuery(cursor));
          goto _L7
_L10:
        Log.e("ContactsAccessor", jsonexception1.getMessage(), jsonexception1);
        break; /* Loop/switch isn't completed */
_L9:
        try
        {
            if(s3.equals("vnd.android.cursor.item/email_v2") && isRequired("emails", hashmap))
                jsonarray4.put(emailQuery(cursor));
            else
            if(s3.equals("vnd.android.cursor.item/postal-address_v2") && isRequired("addresses", hashmap))
                jsonarray2.put(addressQuery(cursor));
            else
            if(s3.equals("vnd.android.cursor.item/organization") && isRequired("organizations", hashmap))
                jsonarray1.put(organizationQuery(cursor));
            else
            if(s3.equals("vnd.android.cursor.item/im") && isRequired("ims", hashmap))
                jsonarray5.put(imQuery(cursor));
            else
            if(s3.equals("vnd.android.cursor.item/note") && isRequired("note", hashmap))
                jsonobject.put("note", cursor.getString(cursor.getColumnIndex("data1")));
            else
            if(s3.equals("vnd.android.cursor.item/nickname") && isRequired("nickname", hashmap))
                jsonobject.put("nickname", cursor.getString(cursor.getColumnIndex("data1")));
            else
            if(s3.equals("vnd.android.cursor.item/website") && isRequired("urls", hashmap))
                jsonarray6.put(websiteQuery(cursor));
            else
            if(s3.equals("vnd.android.cursor.item/contact_event"))
            {
                if(3 == cursor.getInt(cursor.getColumnIndex("data2")) && isRequired("birthday", hashmap))
                    jsonobject.put("birthday", cursor.getString(cursor.getColumnIndex("data1")));
            } else
            if(s3.equals("vnd.android.cursor.item/photo") && isRequired("photos", hashmap))
                jsonarray7.put(photoQuery(cursor, s));
            break; /* Loop/switch isn't completed */
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            jsonexception1 = jsonexception;
        }
        if(true) goto _L10; else goto _L4
_L4:
        if(jsonarray.length() < i)
            jsonarray.put(populateContact(jsonobject, jsonarray1, jsonarray2, jsonarray3, jsonarray4, jsonarray5, jsonarray6, jsonarray7));
_L2:
        cursor.close();
        return jsonarray;
        JSONException jsonexception2;
        jsonexception2;
        jsonexception1 = jsonexception2;
        jsonarray6 = jsonarray13;
        jsonarray5 = jsonarray12;
        jsonarray4 = jsonarray11;
        jsonarray3 = jsonarray10;
        jsonarray2 = jsonarray9;
        jsonarray1 = jsonarray8;
        jsonobject = jsonobject1;
        if(true) goto _L10; else goto _L7
_L7:
        s1 = s;
        if(true) goto _L1; else goto _L11
_L11:
    }

    private JSONObject websiteQuery(Cursor cursor)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("id", cursor.getString(cursor.getColumnIndex("_id")));
            jsonobject.put("pref", false);
            jsonobject.put("value", cursor.getString(cursor.getColumnIndex("data1")));
            jsonobject.put("type", getContactType(cursor.getInt(cursor.getColumnIndex("data2"))));
        }
        catch(JSONException jsonexception)
        {
            Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
        }
        return jsonobject;
    }

    public JSONObject getContactById(String s)
        throws JSONException
    {
        Cursor cursor = mApp.getContentResolver().query(android.provider.ContactsContract.Data.CONTENT_URI, null, "contact_id = ? ", new String[] {
            s
        }, "contact_id ASC");
        JSONArray jsonarray = new JSONArray();
        jsonarray.put("*");
        JSONArray jsonarray1 = populateContactArray(1, buildPopulationSet(jsonarray), cursor);
        JSONObject jsonobject;
        if(jsonarray1.length() == 1)
            jsonobject = jsonarray1.getJSONObject(0);
        else
            jsonobject = null;
        return jsonobject;
    }

    public boolean remove(String s)
    {
        int i = 0;
        Cursor cursor = mApp.getContentResolver().query(android.provider.ContactsContract.Contacts.CONTENT_URI, null, "_id = ?", new String[] {
            s
        }, null);
        boolean flag;
        if(cursor.getCount() == 1)
        {
            cursor.moveToFirst();
            String s1 = cursor.getString(cursor.getColumnIndex("lookup"));
            Uri uri = Uri.withAppendedPath(android.provider.ContactsContract.Contacts.CONTENT_LOOKUP_URI, s1);
            i = mApp.getContentResolver().delete(uri, null, null);
        } else
        {
            Log.d("ContactsAccessor", "Could not find contact with ID");
        }
        if(i > 0)
            flag = true;
        else
            flag = false;
        return flag;
    }

    public String save(JSONObject jsonobject)
    {
        Account aaccount[];
        String s;
        String s1;
        aaccount = AccountManager.get(mApp).getAccounts();
        s = null;
        s1 = null;
        if(aaccount.length != 1) goto _L2; else goto _L1
_L1:
        s = aaccount[0].name;
        s1 = aaccount[0].type;
_L4:
        String s2 = getJsonString(jsonobject, "id");
        int i;
        int j;
        int k;
        int l;
        Account account;
        String s3;
        int i1;
        int j1;
        Account account1;
        Account account2;
        if(s2 == null)
            s3 = createNewContact(jsonobject, s1, s);
        else
            s3 = modifyContact(s2, jsonobject, s1, s);
        return s3;
_L2:
        if(aaccount.length <= 1) goto _L4; else goto _L3
_L3:
        i = aaccount.length;
        j = 0;
_L15:
        if(j >= i) goto _L6; else goto _L5
_L5:
        account2 = aaccount[j];
        if(!account2.type.contains("eas") || !account2.name.matches(".+@.+\\.+.+")) goto _L8; else goto _L7
_L7:
        s = account2.name;
        s1 = account2.type;
_L6:
        if(s != null) goto _L10; else goto _L9
_L9:
        i1 = aaccount.length;
        j1 = 0;
_L16:
        if(j1 >= i1) goto _L10; else goto _L11
_L11:
        account1 = aaccount[j1];
        if(!account1.type.contains("com.google") || !account1.name.matches(".+@.+\\.+.+")) goto _L13; else goto _L12
_L12:
        s = account1.name;
        s1 = account1.type;
_L10:
        if(s != null) goto _L4; else goto _L14
_L14:
        k = aaccount.length;
        l = 0;
_L17:
        if(l < k)
        {
            account = aaccount[l];
            if(!account.name.matches(".+@.+\\.+.+"))
                break MISSING_BLOCK_LABEL_259;
            s = account.name;
            s1 = account.type;
        }
          goto _L4
_L8:
        j++;
          goto _L15
_L13:
        j1++;
          goto _L16
        l++;
          goto _L17
    }

    public JSONArray search(JSONArray jsonarray, JSONObject jsonobject)
    {
        int i = 0x7fffffff;
        if(jsonobject == null) goto _L2; else goto _L1
_L1:
        String s;
        String s1 = jsonobject.optString("filter");
        ContactAccessor.WhereOptions whereoptions;
        boolean flag;
        if(s1.length() == 0)
            s = "%";
        else
            s = (new StringBuilder()).append("%").append(s1).append("%").toString();
        flag = jsonobject.getBoolean("multiple");
        if(!flag)
            i = 1;
        break MISSING_BLOCK_LABEL_45;
_L2:
        s = "%";
_L4:
        HashMap hashmap = buildPopulationSet(jsonarray);
        whereoptions = buildWhereClause(jsonarray, s);
        Cursor cursor = mApp.getContentResolver().query(android.provider.ContactsContract.Data.CONTENT_URI, new String[] {
            "contact_id"
        }, whereoptions.getWhere(), whereoptions.getWhereArgs(), "contact_id ASC");
        HashSet hashset = new HashSet();
        for(; cursor.moveToNext(); hashset.add(cursor.getString(cursor.getColumnIndex("contact_id"))));
        cursor.close();
        ContactAccessor.WhereOptions whereoptions1 = buildIdClause(hashset, s);
        Cursor cursor1 = mApp.getContentResolver().query(android.provider.ContactsContract.Data.CONTENT_URI, null, whereoptions1.getWhere(), whereoptions1.getWhereArgs(), "contact_id ASC");
        return populateContactArray(i, hashmap, cursor1);
        JSONException jsonexception;
        jsonexception;
        if(true) goto _L4; else goto _L3
_L3:
    }

    private static final String EMAIL_REGEXP = ".+@.+\\.+.+";
    private static final long MAX_PHOTO_SIZE = 0x100000L;
    private static final Map dbMap;

    static 
    {
        dbMap = new HashMap();
        dbMap.put("id", "contact_id");
        dbMap.put("displayName", "display_name");
        dbMap.put("name", "data1");
        dbMap.put("name.formatted", "data1");
        dbMap.put("name.familyName", "data3");
        dbMap.put("name.givenName", "data2");
        dbMap.put("name.middleName", "data5");
        dbMap.put("name.honorificPrefix", "data4");
        dbMap.put("name.honorificSuffix", "data6");
        dbMap.put("nickname", "data1");
        dbMap.put("phoneNumbers", "data1");
        dbMap.put("phoneNumbers.value", "data1");
        dbMap.put("emails", "data1");
        dbMap.put("emails.value", "data1");
        dbMap.put("addresses", "data1");
        dbMap.put("addresses.formatted", "data1");
        dbMap.put("addresses.streetAddress", "data4");
        dbMap.put("addresses.locality", "data7");
        dbMap.put("addresses.region", "data8");
        dbMap.put("addresses.postalCode", "data9");
        dbMap.put("addresses.country", "data10");
        dbMap.put("ims", "data1");
        dbMap.put("ims.value", "data1");
        dbMap.put("organizations", "data1");
        dbMap.put("organizations.name", "data1");
        dbMap.put("organizations.department", "data5");
        dbMap.put("organizations.title", "data4");
        dbMap.put("birthday", "vnd.android.cursor.item/contact_event");
        dbMap.put("note", "data1");
        dbMap.put("photos.value", "vnd.android.cursor.item/photo");
        dbMap.put("urls", "data1");
        dbMap.put("urls.value", "data1");
    }
}
