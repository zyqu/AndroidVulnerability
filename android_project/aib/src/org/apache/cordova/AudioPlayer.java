// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.os.Environment;
import android.util.Log;
import java.io.File;
import java.io.IOException;
import org.apache.cordova.api.CordovaInterface;

// Referenced classes of package org.apache.cordova:
//            AudioHandler

public class AudioPlayer
    implements android.media.MediaPlayer.OnCompletionListener, android.media.MediaPlayer.OnPreparedListener, android.media.MediaPlayer.OnErrorListener
{

    public AudioPlayer(AudioHandler audiohandler, String s)
    {
        state = MEDIA_NONE;
        audioFile = null;
        duration = -1F;
        recorder = null;
        tempFile = null;
        mPlayer = null;
        prepareOnly = false;
        handler = audiohandler;
        id = s;
        tempFile = (new StringBuilder()).append(Environment.getExternalStorageDirectory().getAbsolutePath()).append("/tmprecording.mp3").toString();
    }

    private float getDurationInSeconds()
    {
        return (float)mPlayer.getDuration() / 1000F;
    }

    private void setState(int i)
    {
        if(state != i)
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_STATE).append(", ").append(i).append(");").toString());
        state = i;
    }

    public void destroy()
    {
        if(mPlayer != null)
        {
            if(state == MEDIA_RUNNING || state == MEDIA_PAUSED)
            {
                mPlayer.stop();
                setState(MEDIA_STOPPED);
            }
            mPlayer.release();
            mPlayer = null;
        }
        if(recorder != null)
        {
            stopRecording();
            recorder.release();
            recorder = null;
        }
    }

    public long getCurrentPosition()
    {
        long l;
        if(state == MEDIA_RUNNING || state == MEDIA_PAUSED)
        {
            int i = mPlayer.getCurrentPosition();
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_POSITION).append(", ").append((float)i / 1000F).append(");").toString());
            l = i;
        } else
        {
            l = -1L;
        }
        return l;
    }

    public float getDuration(String s)
    {
        float f;
        if(recorder != null)
            f = -2F;
        else
        if(mPlayer != null)
        {
            f = duration;
        } else
        {
            prepareOnly = true;
            startPlaying(s);
            f = duration;
        }
        return f;
    }

    public int getState()
    {
        return state;
    }

    public boolean isStreaming(String s)
    {
        boolean flag;
        if(s.contains("http://") || s.contains("https://"))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void moveFile(String s)
    {
        (new File(tempFile)).renameTo(new File((new StringBuilder()).append("/sdcard/").append(s).toString()));
    }

    public void onCompletion(MediaPlayer mediaplayer)
    {
        setState(MEDIA_STOPPED);
    }

    public boolean onError(MediaPlayer mediaplayer, int i, int j)
    {
        Log.d("AudioPlayer", (new StringBuilder()).append("AudioPlayer.onError(").append(i).append(", ").append(j).append(")").toString());
        mPlayer.stop();
        mPlayer.release();
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(i).append(");").toString());
        return false;
    }

    public void onPrepared(MediaPlayer mediaplayer)
    {
        mPlayer.setOnCompletionListener(this);
        if(!prepareOnly)
        {
            mPlayer.start();
            setState(MEDIA_RUNNING);
        }
        duration = getDurationInSeconds();
        prepareOnly = false;
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_DURATION).append(",").append(duration).append(");").toString());
    }

    public void pausePlaying()
    {
        if(state == MEDIA_RUNNING)
        {
            mPlayer.pause();
            setState(MEDIA_PAUSED);
        } else
        {
            Log.d("AudioPlayer", (new StringBuilder()).append("AudioPlayer Error: pausePlaying() called during invalid state: ").append(state).toString());
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_NONE_ACTIVE).append(");").toString());
        }
    }

    public void seekToPlaying(int i)
    {
        if(mPlayer != null)
        {
            mPlayer.seekTo(i);
            Log.d("AudioPlayer", "Send a onStatus update for the new seek");
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_POSITION).append(", ").append((float)i / 1000F).append(");").toString());
        }
    }

    public void setVolume(float f)
    {
        mPlayer.setVolume(f, f);
    }

    public void startPlaying(String s)
    {
        if(recorder == null) goto _L2; else goto _L1
_L1:
        Log.d("AudioPlayer", "AudioPlayer Error: Can't play in record mode.");
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
_L8:
        return;
_L2:
        if(mPlayer != null && state != MEDIA_STOPPED)
            break MISSING_BLOCK_LABEL_357;
        if(mPlayer == null) goto _L4; else goto _L3
_L3:
        mPlayer.reset();
_L6:
        audioFile = s;
        if(isStreaming(s))
        {
            mPlayer.setDataSource(s);
            mPlayer.setAudioStreamType(3);
            setState(MEDIA_STARTING);
            mPlayer.setOnPreparedListener(this);
            mPlayer.prepareAsync();
            continue; /* Loop/switch isn't completed */
        }
        break; /* Loop/switch isn't completed */
        Exception exception;
        exception;
        exception.printStackTrace();
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
        continue; /* Loop/switch isn't completed */
_L4:
        mPlayer = new MediaPlayer();
        if(true) goto _L6; else goto _L5
_L5:
        if(s.startsWith("/android_asset/"))
        {
            String s1 = s.substring(15);
            AssetFileDescriptor assetfiledescriptor = handler.ctx.getBaseContext().getAssets().openFd(s1);
            mPlayer.setDataSource(assetfiledescriptor.getFileDescriptor(), assetfiledescriptor.getStartOffset(), assetfiledescriptor.getLength());
        } else
        {
            mPlayer.setDataSource((new StringBuilder()).append("/sdcard/").append(s).toString());
        }
        setState(MEDIA_STARTING);
        mPlayer.setOnPreparedListener(this);
        mPlayer.prepare();
        duration = getDurationInSeconds();
        continue; /* Loop/switch isn't completed */
        if(state == MEDIA_PAUSED || state == MEDIA_STARTING)
        {
            mPlayer.start();
            setState(MEDIA_RUNNING);
        } else
        {
            Log.d("AudioPlayer", (new StringBuilder()).append("AudioPlayer Error: startPlaying() called during invalid state: ").append(state).toString());
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
        }
        if(true) goto _L8; else goto _L7
_L7:
    }

    public void startRecording(String s)
    {
        if(mPlayer == null) goto _L2; else goto _L1
_L1:
        Log.d("AudioPlayer", "AudioPlayer Error: Can't record in play mode.");
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
_L7:
        return;
_L2:
        if(recorder != null) goto _L4; else goto _L3
_L3:
        audioFile = s;
        recorder = new MediaRecorder();
        recorder.setAudioSource(1);
        recorder.setOutputFormat(0);
        recorder.setAudioEncoder(0);
        recorder.setOutputFile(tempFile);
        recorder.prepare();
        recorder.start();
        setState(MEDIA_RUNNING);
        continue; /* Loop/switch isn't completed */
        IllegalStateException illegalstateexception;
        illegalstateexception;
        illegalstateexception.printStackTrace();
_L5:
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
        continue; /* Loop/switch isn't completed */
        IOException ioexception;
        ioexception;
        ioexception.printStackTrace();
        if(true) goto _L5; else goto _L4
_L4:
        Log.d("AudioPlayer", "AudioPlayer Error: Already recording.");
        handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_ABORTED).append(");").toString());
        if(true) goto _L7; else goto _L6
_L6:
    }

    public void stopPlaying()
    {
        if(state == MEDIA_RUNNING || state == MEDIA_PAUSED)
        {
            mPlayer.stop();
            setState(MEDIA_STOPPED);
        } else
        {
            Log.d("AudioPlayer", (new StringBuilder()).append("AudioPlayer Error: stopPlaying() called during invalid state: ").append(state).toString());
            handler.sendJavascript((new StringBuilder()).append("require('cordova/plugin/Media').onStatus('").append(id).append("', ").append(MEDIA_ERROR).append(", ").append(MEDIA_ERR_NONE_ACTIVE).append(");").toString());
        }
    }

    public void stopRecording()
    {
        if(recorder == null)
            break MISSING_BLOCK_LABEL_39;
        if(state == MEDIA_RUNNING)
        {
            recorder.stop();
            setState(MEDIA_STOPPED);
        }
        moveFile(audioFile);
_L1:
        return;
        Exception exception;
        exception;
        exception.printStackTrace();
          goto _L1
    }

    private static final String LOG_TAG = "AudioPlayer";
    private static int MEDIA_DURATION = 2;
    private static int MEDIA_ERROR = 9;
    private static int MEDIA_ERR_ABORTED = 1;
    private static int MEDIA_ERR_DECODE = 3;
    private static int MEDIA_ERR_NETWORK = 2;
    private static int MEDIA_ERR_NONE_ACTIVE = 0;
    private static int MEDIA_ERR_NONE_SUPPORTED = 4;
    public static int MEDIA_NONE = 0;
    public static int MEDIA_PAUSED = 3;
    private static int MEDIA_POSITION = 3;
    public static int MEDIA_RUNNING = 2;
    public static int MEDIA_STARTING = 1;
    private static int MEDIA_STATE = 1;
    public static int MEDIA_STOPPED = 4;
    private String audioFile;
    private float duration;
    private AudioHandler handler;
    private String id;
    private MediaPlayer mPlayer;
    private boolean prepareOnly;
    private MediaRecorder recorder;
    private int state;
    private String tempFile;

}
