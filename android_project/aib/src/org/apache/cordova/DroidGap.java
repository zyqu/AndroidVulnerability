// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.*;
import android.content.res.*;
import android.net.Uri;
import android.os.Bundle;
import android.view.*;
import android.webkit.*;
import android.widget.LinearLayout;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.IPlugin;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.PluginManager;
import org.xmlpull.v1.XmlPullParserException;

// Referenced classes of package org.apache.cordova:
//            PreferenceNode, PreferenceSet, AuthenticationToken, CordovaChromeClient, 
//            CordovaWebViewClient, LinearLayoutSoftKeyboardDetect, CallbackServer

public class DroidGap extends Activity
    implements CordovaInterface
{

    public DroidGap()
    {
        whiteList = new ArrayList();
        whiteListCache = new HashMap();
        bound = false;
        cancelLoadUrl = false;
        spinnerDialog = null;
        url = null;
        urls = new Stack();
        initUrl = null;
        activityState = 0;
        baseUrl = null;
        activityResultCallback = null;
        loadUrlTimeout = 0;
        backgroundColor = 0xff000000;
        authenticationTokens = new Hashtable();
        splashscreen = 0;
        loadUrlTimeoutValue = 20000;
        keepRunning = true;
    }

    private void addWhiteListEntry(String s, boolean flag)
    {
        if(s.compareTo("*") == 0)
        {
            LOG.d(TAG, "Unlimited access to network resources");
            whiteList.add(Pattern.compile(".*"));
            break MISSING_BLOCK_LABEL_217;
        }
        if(!flag)
            break MISSING_BLOCK_LABEL_137;
        if(!s.startsWith("http"))
            break MISSING_BLOCK_LABEL_104;
        whiteList.add(Pattern.compile(s.replaceFirst("https?://", "^https?://(.*\\.)?")));
_L1:
        LOG.d(TAG, "Origin to allow with subdomains: %s", new Object[] {
            s
        });
        break MISSING_BLOCK_LABEL_217;
        Exception exception;
        exception;
        LOG.d(TAG, "Failed to add origin %s", new Object[] {
            s
        });
        break MISSING_BLOCK_LABEL_217;
        whiteList.add(Pattern.compile((new StringBuilder()).append("^https?://(.*\\.)?").append(s).toString()));
          goto _L1
        if(s.startsWith("http"))
            whiteList.add(Pattern.compile(s.replaceFirst("https?://", "^https?://")));
        else
            whiteList.add(Pattern.compile((new StringBuilder()).append("^https?://").append(s).toString()));
        LOG.d(TAG, "Origin to allow: %s", new Object[] {
            s
        });
    }

    private void handleActivityParameters()
    {
        backgroundColor = getIntegerProperty("backgroundColor", 0xff000000);
        root.setBackgroundColor(backgroundColor);
        splashscreen = getIntegerProperty("splashscreen", 0);
        if(urls.size() == 0 && splashscreen != 0)
            root.setBackgroundResource(splashscreen);
        int i = getIntegerProperty("loadUrlTimeoutValue", 0);
        if(i > 0)
            loadUrlTimeoutValue = i;
        keepRunning = getBooleanProperty("keepRunning", true);
    }

    private void loadConfiguration()
    {
        int i = getResources().getIdentifier("cordova", "xml", getPackageName());
        if(i != 0) goto _L2; else goto _L1
_L1:
        LOG.i("CordovaLog", "cordova.xml missing. Ignoring...");
_L6:
        return;
_L2:
        XmlResourceParser xmlresourceparser;
        int j;
        xmlresourceparser = getResources().getXml(i);
        j = -1;
_L4:
        if(j == 1)
            continue; /* Loop/switch isn't completed */
        if(j == 2)
        {
            String s = xmlresourceparser.getName();
            if(s.equals("access"))
            {
                String s5 = xmlresourceparser.getAttributeValue(null, "origin");
                String s6 = xmlresourceparser.getAttributeValue(null, "subdomains");
                if(s5 != null)
                {
                    int k;
                    boolean flag1;
                    if(s6 != null && s6.compareToIgnoreCase("true") == 0)
                        flag1 = true;
                    else
                        flag1 = false;
                    addWhiteListEntry(s5, flag1);
                }
            } else
            if(s.equals("log"))
            {
                String s4 = xmlresourceparser.getAttributeValue(null, "level");
                LOG.i("CordovaLog", "Found log level %s", new Object[] {
                    s4
                });
                if(s4 != null)
                    LOG.setLogLevel(s4);
            } else
            if(s.equals("preference"))
            {
                String s1 = xmlresourceparser.getAttributeValue(null, "name");
                String s2 = xmlresourceparser.getAttributeValue(null, "value");
                String s3 = xmlresourceparser.getAttributeValue(null, "readonly");
                boolean flag;
                PreferenceSet preferenceset;
                PreferenceNode preferencenode;
                if(s3 != null && s3.equals("true"))
                    flag = true;
                else
                    flag = false;
                LOG.i("CordovaLog", "Found preference for %s", new Object[] {
                    s1
                });
                preferenceset = preferences;
                preferencenode = new PreferenceNode(s1, s2, flag);
                preferenceset.add(preferencenode);
            }
        }
        k = xmlresourceparser.next();
        j = k;
        break; /* Loop/switch isn't completed */
        XmlPullParserException xmlpullparserexception;
        xmlpullparserexception;
        xmlpullparserexception.printStackTrace();
        break; /* Loop/switch isn't completed */
        IOException ioexception;
        ioexception;
        ioexception.printStackTrace();
        if(true) goto _L4; else goto _L3
_L3:
        if(true) goto _L6; else goto _L5
_L5:
    }

    private void loadUrlIntoView(final String url)
    {
        if(!url.startsWith("javascript:"))
            LOG.d(TAG, "DroidGap.loadUrl(%s)", new Object[] {
                url
            });
        this.url = url;
        if(baseUrl == null)
        {
            int i = url.lastIndexOf('/');
            String s;
            Object aobj[];
            if(i > 0)
                baseUrl = url.substring(0, i + 1);
            else
                baseUrl = (new StringBuilder()).append(this.url).append("/").toString();
        }
        if(!url.startsWith("javascript:"))
        {
            s = TAG;
            aobj = new Object[2];
            aobj[0] = url;
            aobj[1] = baseUrl;
            LOG.d(s, "DroidGap: url=%s baseUrl=%s", aobj);
        }
        runOnUiThread(new Runnable() {

            public void run()
            {
                if(me.appView == null)
                    me.init();
                me.handleActivityParameters();
                me.urls.push(url);
                me.appView.clearHistory();
                String s1;
                if(me.callbackServer == null)
                {
                    me.callbackServer = new CallbackServer();
                    me.callbackServer.init(url);
                } else
                {
                    me.callbackServer.reinit(url);
                }
                if(me.pluginManager == null)
                    me.pluginManager = new PluginManager(me.appView, me);
                else
                    me.pluginManager.reinit();
                if(me.urls.size() == 1)
                    s1 = me.getStringProperty("loadingDialog", null);
                else
                    s1 = me.getStringProperty("loadingPageDialog", null);
                if(s1 != null)
                {
                    String s2 = "";
                    String s3 = "Loading Application...";
                    if(s1.length() > 0)
                    {
                        int j = s1.indexOf(',');
                        if(j > 0)
                        {
                            s2 = s1.substring(0, j);
                            s3 = s1.substring(j + 1);
                        } else
                        {
                            s2 = "";
                            s3 = s1;
                        }
                    }
                    me.spinnerStart(s2, s3);
                }
                (new Thread(me.loadUrlTimeout. new Runnable() {

                    public void run()
                    {
                        this;
                        JVM INSTR monitorenter ;
                        wait(me.loadUrlTimeoutValue);
                        this;
                        JVM INSTR monitorexit ;
_L2:
                        if(me.loadUrlTimeout == currentLoadUrlTimeout)
                        {
                            me.appView.stopLoading();
                            LOG.e(DroidGap.TAG, "DroidGap: TIMEOUT ERROR! - calling webViewClient");
                            me.webViewClient.onReceivedError(me.appView, -6, "The connection to the server was unsuccessful.", url);
                        }
                        return;
                        Exception exception;
                        exception;
                        this;
                        JVM INSTR monitorexit ;
                        try
                        {
                            throw exception;
                        }
                        catch(InterruptedException interruptedexception)
                        {
                            interruptedexception.printStackTrace();
                        }
                        if(true) goto _L2; else goto _L1
_L1:
                    }

                    final _cls1 this$1;
                    final int val$currentLoadUrlTimeout;

            
            {
                this$1 = final__pcls1;
                currentLoadUrlTimeout = I.this;
                super();
            }
                })).start();
                me.appView.loadUrl(url);
            }

            final DroidGap this$0;
            final DroidGap val$me;
            final String val$url;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                url = s;
                super();
            }
        });
    }

    private void loadUrlIntoView(final String url, final int time)
    {
        cancelLoadUrl = false;
        if(urls.size() > 0)
            loadUrlIntoView(url);
        if(!url.startsWith("javascript:"))
        {
            String s = TAG;
            Object aobj[] = new Object[2];
            aobj[0] = url;
            aobj[1] = Integer.valueOf(time);
            LOG.d(s, "DroidGap.loadUrl(%s, %d)", aobj);
        }
        runOnUiThread(new Runnable() {

            public void run()
            {
                if(me.appView == null)
                    me.init();
                me.handleActivityParameters();
            }

            final DroidGap this$0;
            final DroidGap val$me;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                super();
            }
        });
        (new Thread(new Runnable() {

            public void run()
            {
                this;
                JVM INSTR monitorenter ;
                wait(time);
                this;
                JVM INSTR monitorexit ;
_L1:
                InterruptedException interruptedexception;
                Exception exception;
                if(!me.cancelLoadUrl)
                {
                    me.loadUrlIntoView(url);
                } else
                {
                    me.cancelLoadUrl = false;
                    String s1 = DroidGap.TAG;
                    Object aobj1[] = new Object[1];
                    aobj1[0] = url;
                    LOG.d(s1, "Aborting loadUrl(%s): Another URL was loaded before timer expired.", aobj1);
                }
                return;
                exception;
                this;
                JVM INSTR monitorexit ;
                try
                {
                    throw exception;
                }
                // Misplaced declaration of an exception variable
                catch(InterruptedException interruptedexception)
                {
                    interruptedexception.printStackTrace();
                }
                  goto _L1
            }

            final DroidGap this$0;
            final DroidGap val$me;
            final int val$time;
            final String val$url;

            
            {
                this$0 = DroidGap.this;
                time = i;
                me = droidgap1;
                url = s;
                super();
            }
        })).start();
    }

    public void addService(String s, String s1)
    {
        pluginManager.addService(s, s1);
    }

    public boolean backHistory()
    {
        boolean flag;
        if(appView.canGoBack())
        {
            appView.goBack();
            flag = true;
        } else
        if(urls.size() > 1)
        {
            urls.pop();
            loadUrl((String)urls.pop());
            flag = true;
        } else
        {
            flag = false;
        }
        return flag;
    }

    public void bindBackButton(boolean flag)
    {
        bound = flag;
    }

    public void cancelLoadUrl()
    {
        cancelLoadUrl = true;
    }

    public void clearAuthenticationTokens()
    {
        authenticationTokens.clear();
    }

    public void clearCache()
    {
        if(appView == null)
            init();
        appView.clearCache(true);
    }

    public void clearHistory()
    {
        urls.clear();
        appView.clearHistory();
        if(url != null)
            urls.push(url);
    }

    public void displayError(final String title, final String message, final String button, final boolean exit)
    {
        runOnUiThread(new Runnable() {

            public void run()
            {
                android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(me);
                builder.setMessage(message);
                builder.setTitle(title);
                builder.setCancelable(false);
                builder.setPositiveButton(button, new android.content.DialogInterface.OnClickListener() {

                    public void onClick(DialogInterface dialoginterface, int i)
                    {
                        dialoginterface.dismiss();
                        if(exit)
                            me.endActivity();
                    }

                    final _cls7 this$1;

            
            {
                this$1 = _cls7.this;
                super();
            }
                });
                builder.create();
                builder.show();
            }

            final DroidGap this$0;
            final String val$button;
            final boolean val$exit;
            final DroidGap val$me;
            final String val$message;
            final String val$title;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                message = s;
                title = s1;
                button = s2;
                exit = flag;
                super();
            }
        });
    }

    public void endActivity()
    {
        activityState = ACTIVITY_EXITING;
        finish();
    }

    public AuthenticationToken getAuthenticationToken(String s, String s1)
    {
        AuthenticationToken authenticationtoken = (AuthenticationToken)authenticationTokens.get(s.concat(s1));
        if(authenticationtoken == null)
        {
            authenticationtoken = (AuthenticationToken)authenticationTokens.get(s);
            if(authenticationtoken == null)
                authenticationtoken = (AuthenticationToken)authenticationTokens.get(s1);
            if(authenticationtoken == null)
                authenticationtoken = (AuthenticationToken)authenticationTokens.get("");
        }
        return authenticationtoken;
    }

    public boolean getBooleanProperty(String s, boolean flag)
    {
        Bundle bundle = getIntent().getExtras();
        boolean flag1;
        if(bundle == null)
        {
            flag1 = flag;
        } else
        {
            Boolean boolean1 = (Boolean)bundle.get(s);
            if(boolean1 == null)
                flag1 = flag;
            else
                flag1 = boolean1.booleanValue();
        }
        return flag1;
    }

    public Context getContext()
    {
        return this;
    }

    public double getDoubleProperty(String s, double d)
    {
        Bundle bundle = getIntent().getExtras();
        double d1;
        if(bundle == null)
        {
            d1 = d;
        } else
        {
            Double double1 = (Double)bundle.get(s);
            if(double1 == null)
                d1 = d;
            else
                d1 = double1.doubleValue();
        }
        return d1;
    }

    public int getIntegerProperty(String s, int i)
    {
        Bundle bundle = getIntent().getExtras();
        int j;
        if(bundle == null)
        {
            j = i;
        } else
        {
            Integer integer = (Integer)bundle.get(s);
            if(integer == null)
                j = i;
            else
                j = integer.intValue();
        }
        return j;
    }

    public String getStringProperty(String s, String s1)
    {
        Bundle bundle = getIntent().getExtras();
        String s3;
        if(bundle == null)
        {
            s3 = s1;
        } else
        {
            String s2 = bundle.getString(s);
            if(s2 == null)
                s3 = s1;
            else
                s3 = s2;
        }
        return s3;
    }

    public void init()
    {
        LOG.d(TAG, "DroidGap.init()");
        appView = new WebView(this);
        appView.setId(100);
        appView.setLayoutParams(new android.widget.LinearLayout.LayoutParams(-1, -1, 1.0F));
        appView.setWebChromeClient(new CordovaChromeClient(this));
        setWebViewClient(appView, new CordovaWebViewClient(this));
        appView.setInitialScale(0);
        appView.setVerticalScrollBarEnabled(false);
        appView.requestFocusFromTouch();
        WebSettings websettings = appView.getSettings();
        websettings.setJavaScriptEnabled(true);
        websettings.setJavaScriptCanOpenWindowsAutomatically(true);
        websettings.setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm.NORMAL);
        websettings.setNavDump(true);
        websettings.setDatabaseEnabled(true);
        websettings.setDatabasePath(getApplicationContext().getDir("database", 0).getPath());
        websettings.setDomStorageEnabled(true);
        websettings.setGeolocationEnabled(true);
        appView.setVisibility(4);
        root.addView(appView);
        setContentView(root);
        cancelLoadUrl = false;
    }

    public boolean isBackButtonBound()
    {
        return bound;
    }

    boolean isUrlWhiteListed(String s)
    {
        if(whiteListCache.get(s) == null) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L4:
        return flag;
_L2:
        for(Iterator iterator = whiteList.iterator(); iterator.hasNext();)
            if(((Pattern)iterator.next()).matcher(s).find())
            {
                whiteListCache.put(s, Boolean.valueOf(true));
                flag = true;
                continue; /* Loop/switch isn't completed */
            }

        flag = false;
        if(true) goto _L4; else goto _L3
_L3:
    }

    public void loadUrl(String s)
    {
        if(initUrl == null || urls.size() > 0)
            loadUrlIntoView(s);
        else
            loadUrlIntoView(initUrl);
    }

    public void loadUrl(String s, int i)
    {
        if(initUrl == null || urls.size() > 0)
            loadUrlIntoView(s, i);
        else
            loadUrlIntoView(initUrl);
    }

    protected void onActivityResult(int i, int j, Intent intent)
    {
        super.onActivityResult(i, j, intent);
        IPlugin iplugin = activityResultCallback;
        if(iplugin != null)
            iplugin.onActivityResult(i, j, intent);
    }

    public void onConfigurationChanged(Configuration configuration)
    {
        super.onConfigurationChanged(configuration);
    }

    public void onCreate(Bundle bundle)
    {
        preferences = new PreferenceSet();
        loadConfiguration();
        LOG.d(TAG, "DroidGap.onCreate()");
        super.onCreate(bundle);
        getWindow().requestFeature(1);
        Display display;
        Bundle bundle1;
        if(preferences.prefMatches("fullscreen", "true"))
            getWindow().setFlags(1024, 1024);
        else
            getWindow().setFlags(2048, 2048);
        display = getWindowManager().getDefaultDisplay();
        root = new LinearLayoutSoftKeyboardDetect(this, display.getWidth(), display.getHeight());
        root.setOrientation(1);
        root.setBackgroundColor(backgroundColor);
        root.setLayoutParams(new android.widget.LinearLayout.LayoutParams(-1, -1, 0.0F));
        bundle1 = getIntent().getExtras();
        if(bundle1 != null)
        {
            String s = bundle1.getString("url");
            if(s != null)
                initUrl = s;
        }
        setVolumeControlStream(3);
    }

    public boolean onCreateOptionsMenu(Menu menu)
    {
        postMessage("onCreateOptionsMenu", menu);
        return super.onCreateOptionsMenu(menu);
    }

    public void onDestroy()
    {
        super.onDestroy();
        if(appView != null)
        {
            appView.loadUrl("javascript:try{require('cordova/channel').onDestroy.fire();}catch(e){console.log('exception firing destroy event from native');};");
            appView.loadUrl("about:blank");
            if(pluginManager != null)
                pluginManager.onDestroy();
        } else
        {
            endActivity();
        }
    }

    public boolean onKeyDown(int i, KeyEvent keyevent)
    {
        boolean flag;
        if(appView == null)
            flag = super.onKeyDown(i, keyevent);
        else
        if(i == 4)
        {
            if(bound)
            {
                appView.loadUrl("javascript:require('cordova').fireDocumentEvent('backbutton');");
                flag = true;
            } else
            if(backHistory())
            {
                flag = true;
            } else
            {
                activityState = ACTIVITY_EXITING;
                flag = super.onKeyDown(i, keyevent);
            }
        } else
        if(i == 82)
        {
            appView.loadUrl("javascript:require('cordova').fireDocumentEvent('menubutton');");
            flag = super.onKeyDown(i, keyevent);
        } else
        if(i == 84)
        {
            appView.loadUrl("javascript:require('cordova').fireDocumentEvent('searchbutton');");
            flag = true;
        } else
        {
            flag = false;
        }
        return flag;
    }

    protected void onNewIntent(Intent intent)
    {
        super.onNewIntent(intent);
        pluginManager.onNewIntent(intent);
    }

    public boolean onOptionsItemSelected(MenuItem menuitem)
    {
        postMessage("onOptionsItemSelected", menuitem);
        return true;
    }

    protected void onPause()
    {
        super.onPause();
        break MISSING_BLOCK_LABEL_4;
        while(true) 
        {
            do
                return;
            while(activityState == ACTIVITY_EXITING || appView == null);
            appView.loadUrl("javascript:try{require('cordova/channel').onPause.fire();}catch(e){console.log('exception firing pause event from native');};");
            pluginManager.onPause(keepRunning);
            if(!keepRunning)
                appView.pauseTimers();
        }
    }

    public boolean onPrepareOptionsMenu(Menu menu)
    {
        postMessage("onPrepareOptionsMenu", menu);
        return super.onPrepareOptionsMenu(menu);
    }

    public void onReceivedError(int i, final String description, final String failingUrl)
    {
        final String errorUrl = getStringProperty("errorUrl", null);
        if(errorUrl != null && (errorUrl.startsWith("file://") || errorUrl.indexOf(baseUrl) == 0 || isUrlWhiteListed(errorUrl)) && !failingUrl.equals(errorUrl))
            runOnUiThread(new Runnable() {

                public void run()
                {
                    me.showWebPage(errorUrl, false, true, null);
                }

                final DroidGap this$0;
                final String val$errorUrl;
                final DroidGap val$me;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                errorUrl = s;
                super();
            }
            });
        else
            runOnUiThread(new Runnable() {

                public void run()
                {
                    me.appView.setVisibility(8);
                    me.displayError("Application Error", (new StringBuilder()).append(description).append(" (").append(failingUrl).append(")").toString(), "OK", true);
                }

                final DroidGap this$0;
                final String val$description;
                final String val$failingUrl;
                final DroidGap val$me;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                description = s;
                failingUrl = s1;
                super();
            }
            });
    }

    protected void onResume()
    {
        super.onResume();
        if(activityState != ACTIVITY_STARTING) goto _L2; else goto _L1
_L1:
        activityState = ACTIVITY_RUNNING;
_L4:
        return;
_L2:
        if(appView != null)
        {
            appView.loadUrl("javascript:try{require('cordova/channel').onResume.fire();}catch(e){console.log('exception firing resume event from native');};");
            PluginManager pluginmanager = pluginManager;
            boolean flag;
            if(keepRunning || activityResultKeepRunning)
                flag = true;
            else
                flag = false;
            pluginmanager.onResume(flag);
            if(!keepRunning || activityResultKeepRunning)
            {
                if(activityResultKeepRunning)
                {
                    keepRunning = activityResultKeepRunning;
                    activityResultKeepRunning = false;
                }
                appView.resumeTimers();
            }
        }
        if(true) goto _L4; else goto _L3
_L3:
    }

    public String peekAtUrlStack()
    {
        String s;
        if(urls.size() > 0)
            s = (String)urls.peek();
        else
            s = "";
        return s;
    }

    public void postMessage(String s, Object obj)
    {
        if(pluginManager != null)
            pluginManager.postMessage(s, obj);
    }

    public void pushUrl(String s)
    {
        urls.push(s);
    }

    public AuthenticationToken removeAuthenticationToken(String s, String s1)
    {
        return (AuthenticationToken)authenticationTokens.remove(s.concat(s1));
    }

    public void sendJavascript(String s)
    {
        callbackServer.sendJavascript(s);
    }

    public void setActivityResultCallback(IPlugin iplugin)
    {
        activityResultCallback = iplugin;
    }

    public void setAuthenticationToken(AuthenticationToken authenticationtoken, String s, String s1)
    {
        if(s == null)
            s = "";
        if(s1 == null)
            s1 = "";
        authenticationTokens.put(s.concat(s1), authenticationtoken);
    }

    public void setBooleanProperty(String s, boolean flag)
    {
        getIntent().putExtra(s, flag);
    }

    public void setDoubleProperty(String s, double d)
    {
        getIntent().putExtra(s, d);
    }

    public void setIntegerProperty(String s, int i)
    {
        getIntent().putExtra(s, i);
    }

    public void setStringProperty(String s, String s1)
    {
        getIntent().putExtra(s, s1);
    }

    protected void setWebViewClient(WebView webview, WebViewClient webviewclient)
    {
        webViewClient = webviewclient;
        webview.setWebViewClient(webviewclient);
    }

    public void showWebPage(String s, boolean flag, boolean flag1, HashMap hashmap)
    {
        String s1 = TAG;
        Object aobj[] = new Object[3];
        aobj[0] = s;
        aobj[1] = Boolean.valueOf(flag);
        aobj[2] = Boolean.valueOf(flag1);
        LOG.d(s1, "showWebPage(%s, %b, %b, HashMap", aobj);
        if(flag1)
            clearHistory();
        if(!flag)
        {
            if(s.startsWith("file://") || s.indexOf(baseUrl) == 0 || isUrlWhiteListed(s))
            {
                if(flag1)
                    urls.clear();
                loadUrl(s);
            } else
            {
                LOG.w(TAG, (new StringBuilder()).append("showWebPage: Cannot load URL into webview since it is not in white list.  Loading into browser instead. (URL=").append(s).append(")").toString());
                try
                {
                    Intent intent1 = new Intent("android.intent.action.VIEW");
                    intent1.setData(Uri.parse(s));
                    startActivity(intent1);
                }
                catch(ActivityNotFoundException activitynotfoundexception1)
                {
                    LOG.e(TAG, (new StringBuilder()).append("Error loading url ").append(s).toString(), activitynotfoundexception1);
                }
            }
        } else
        {
            try
            {
                Intent intent = new Intent("android.intent.action.VIEW");
                intent.setData(Uri.parse(s));
                startActivity(intent);
            }
            catch(ActivityNotFoundException activitynotfoundexception)
            {
                LOG.e(TAG, (new StringBuilder()).append("Error loading url ").append(s).toString(), activitynotfoundexception);
            }
        }
    }

    public void spinnerStart(String s, String s1)
    {
        if(spinnerDialog != null)
        {
            spinnerDialog.dismiss();
            spinnerDialog = null;
        }
        spinnerDialog = ProgressDialog.show(this, s, s1, true, true, new android.content.DialogInterface.OnCancelListener() {

            public void onCancel(DialogInterface dialoginterface)
            {
                me.spinnerDialog = null;
            }

            final DroidGap this$0;
            final DroidGap val$me;

            
            {
                this$0 = DroidGap.this;
                me = droidgap1;
                super();
            }
        });
    }

    public void spinnerStop()
    {
        if(spinnerDialog != null)
        {
            spinnerDialog.dismiss();
            spinnerDialog = null;
        }
    }

    public void startActivityForResult(Intent intent, int i)
        throws RuntimeException
    {
        String s = TAG;
        Object aobj[] = new Object[1];
        aobj[0] = Integer.valueOf(i);
        LOG.d(s, "DroidGap.startActivityForResult(intent,%d)", aobj);
        super.startActivityForResult(intent, i);
    }

    public void startActivityForResult(IPlugin iplugin, Intent intent, int i)
    {
        activityResultCallback = iplugin;
        activityResultKeepRunning = keepRunning;
        if(iplugin != null)
            keepRunning = false;
        super.startActivityForResult(intent, i);
    }

    private static int ACTIVITY_EXITING = 2;
    private static int ACTIVITY_RUNNING = 1;
    private static int ACTIVITY_STARTING = 0;
    public static String TAG = "DroidGap";
    protected IPlugin activityResultCallback;
    protected boolean activityResultKeepRunning;
    private int activityState;
    protected WebView appView;
    private Hashtable authenticationTokens;
    private int backgroundColor;
    String baseUrl;
    public boolean bound;
    public CallbackServer callbackServer;
    protected boolean cancelLoadUrl;
    private String initUrl;
    protected boolean keepRunning;
    int loadUrlTimeout;
    protected int loadUrlTimeoutValue;
    protected PluginManager pluginManager;
    protected PreferenceSet preferences;
    protected LinearLayout root;
    protected ProgressDialog spinnerDialog;
    protected int splashscreen;
    private String url;
    private Stack urls;
    protected WebViewClient webViewClient;
    private ArrayList whiteList;
    private HashMap whiteListCache;




}
