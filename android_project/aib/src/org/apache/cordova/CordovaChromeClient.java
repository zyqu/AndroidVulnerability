// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.Context;
import android.content.DialogInterface;
import android.view.KeyEvent;
import android.webkit.*;
import android.widget.EditText;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.PluginManager;
import org.json.JSONArray;
import org.json.JSONException;

// Referenced classes of package org.apache.cordova:
//            DroidGap, CallbackServer

public class CordovaChromeClient extends WebChromeClient
{

    public CordovaChromeClient(Context context)
    {
        TAG = "CordovaLog";
        MAX_QUOTA = 0x6400000L;
        ctx = (DroidGap)context;
    }

    public void onConsoleMessage(String s, int i, String s1)
    {
        String s2 = TAG;
        Object aobj[] = new Object[3];
        aobj[0] = s1;
        aobj[1] = Integer.valueOf(i);
        aobj[2] = s;
        LOG.d(s2, "%s: Line %d : %s", aobj);
        super.onConsoleMessage(s, i, s1);
    }

    public boolean onConsoleMessage(ConsoleMessage consolemessage)
    {
        if(consolemessage.message() != null)
            LOG.d(TAG, consolemessage.message());
        return super.onConsoleMessage(consolemessage);
    }

    public void onExceededDatabaseQuota(String s, String s1, long l, long l1, long l2, android.webkit.WebStorage.QuotaUpdater quotaupdater)
    {
        String s2 = TAG;
        Object aobj[] = new Object[3];
        aobj[0] = Long.valueOf(l1);
        aobj[1] = Long.valueOf(l);
        aobj[2] = Long.valueOf(l2);
        LOG.d(s2, "DroidGap:  onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d", aobj);
        if(l1 < MAX_QUOTA)
        {
            String s3 = TAG;
            Object aobj1[] = new Object[1];
            aobj1[0] = Long.valueOf(l1);
            LOG.d(s3, "calling quotaUpdater.updateQuota newQuota: %d", aobj1);
            quotaupdater.updateQuota(l1);
        } else
        {
            quotaupdater.updateQuota(l);
        }
    }

    public void onGeolocationPermissionsShowPrompt(String s, android.webkit.GeolocationPermissions.Callback callback)
    {
        super.onGeolocationPermissionsShowPrompt(s, callback);
        callback.invoke(s, true, false);
    }

    public boolean onJsAlert(WebView webview, String s, String s1, final JsResult result)
    {
        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(ctx);
        builder.setMessage(s1);
        builder.setTitle("Alert");
        builder.setCancelable(true);
        builder.setPositiveButton(0x104000a, new android.content.DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialoginterface, int i)
            {
                result.confirm();
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.setOnCancelListener(new android.content.DialogInterface.OnCancelListener() {

            public void onCancel(DialogInterface dialoginterface)
            {
                result.confirm();
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.setOnKeyListener(new android.content.DialogInterface.OnKeyListener() {

            public boolean onKey(DialogInterface dialoginterface, int i, KeyEvent keyevent)
            {
                boolean flag;
                if(i == 4)
                {
                    result.confirm();
                    flag = false;
                } else
                {
                    flag = true;
                }
                return flag;
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.create();
        builder.show();
        return true;
    }

    public boolean onJsConfirm(WebView webview, String s, String s1, final JsResult result)
    {
        android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(ctx);
        builder.setMessage(s1);
        builder.setTitle("Confirm");
        builder.setCancelable(true);
        builder.setPositiveButton(0x104000a, new android.content.DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialoginterface, int i)
            {
                result.confirm();
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.setNegativeButton(0x1040000, new android.content.DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialoginterface, int i)
            {
                result.cancel();
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.setOnCancelListener(new android.content.DialogInterface.OnCancelListener() {

            public void onCancel(DialogInterface dialoginterface)
            {
                result.cancel();
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.setOnKeyListener(new android.content.DialogInterface.OnKeyListener() {

            public boolean onKey(DialogInterface dialoginterface, int i, KeyEvent keyevent)
            {
                boolean flag;
                if(i == 4)
                {
                    result.cancel();
                    flag = false;
                } else
                {
                    flag = true;
                }
                return flag;
            }

            final CordovaChromeClient this$0;
            final JsResult val$result;

            
            {
                this$0 = CordovaChromeClient.this;
                result = jsresult;
                super();
            }
        });
        builder.create();
        builder.show();
        return true;
    }

    public boolean onJsPrompt(WebView webview, String s, String s1, String s2, final JsPromptResult res)
    {
        boolean flag;
        flag = false;
        if(s.startsWith("file://") || s.indexOf(ctx.baseUrl) == 0 || ctx.isUrlWhiteListed(s))
            flag = true;
        if(!flag || s2 == null || s2.length() <= 3 || !s2.substring(0, 4).equals("gap:")) goto _L2; else goto _L1
_L1:
        try
        {
            JSONArray jsonarray = new JSONArray(s2.substring(4));
            String s4 = jsonarray.getString(0);
            String s5 = jsonarray.getString(1);
            String s6 = jsonarray.getString(2);
            boolean flag1 = jsonarray.getBoolean(3);
            res.confirm(ctx.pluginManager.exec(s4, s5, s6, s1, flag1));
        }
        catch(JSONException jsonexception)
        {
            jsonexception.printStackTrace();
        }
_L9:
        return true;
_L2:
        if(flag && s2 != null && s2.equals("gap_poll:"))
        {
            res.confirm(ctx.callbackServer.getJavascript());
            continue; /* Loop/switch isn't completed */
        }
        if(!flag || s2 == null || !s2.equals("gap_callbackServer:")) goto _L4; else goto _L3
_L3:
        String s3 = "";
        if(!s1.equals("usePolling")) goto _L6; else goto _L5
_L5:
        s3 = (new StringBuilder()).append("").append(ctx.callbackServer.usePolling()).toString();
_L7:
        res.confirm(s3);
        continue; /* Loop/switch isn't completed */
_L6:
        if(s1.equals("restartServer"))
            ctx.callbackServer.restartServer();
        else
        if(s1.equals("getPort"))
            s3 = Integer.toString(ctx.callbackServer.getPort());
        else
        if(s1.equals("getToken"))
            s3 = ctx.callbackServer.getToken();
        if(true) goto _L7; else goto _L4
_L4:
        if(flag && s2 != null && s2.equals("gap_init:"))
        {
            ctx.appView.setVisibility(0);
            ctx.spinnerStop();
            res.confirm("OK");
        } else
        {
            android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(ctx);
            builder.setMessage(s1);
            final EditText input = new EditText(ctx);
            if(s2 != null)
                input.setText(s2);
            builder.setView(input);
            builder.setCancelable(false);
            android.content.DialogInterface.OnClickListener onclicklistener = new android.content.DialogInterface.OnClickListener() {

                public void onClick(DialogInterface dialoginterface, int i)
                {
                    String s7 = input.getText().toString();
                    res.confirm(s7);
                }

                final CordovaChromeClient this$0;
                final EditText val$input;
                final JsPromptResult val$res;

            
            {
                this$0 = CordovaChromeClient.this;
                input = edittext;
                res = jspromptresult;
                super();
            }
            };
            builder.setPositiveButton(0x104000a, onclicklistener);
            android.content.DialogInterface.OnClickListener onclicklistener1 = new android.content.DialogInterface.OnClickListener() {

                public void onClick(DialogInterface dialoginterface, int i)
                {
                    res.cancel();
                }

                final CordovaChromeClient this$0;
                final JsPromptResult val$res;

            
            {
                this$0 = CordovaChromeClient.this;
                res = jspromptresult;
                super();
            }
            };
            builder.setNegativeButton(0x1040000, onclicklistener1);
            builder.create();
            builder.show();
        }
        if(true) goto _L9; else goto _L8
_L8:
    }

    private long MAX_QUOTA;
    private String TAG;
    private DroidGap ctx;
}
