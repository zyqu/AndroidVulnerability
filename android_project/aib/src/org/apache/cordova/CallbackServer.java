// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.net.Proxy;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.LinkedList;
import java.util.UUID;

public class CallbackServer
    implements Runnable
{

    public CallbackServer()
    {
        usePolling = true;
        active = false;
        empty = true;
        port = 0;
        javascript = new LinkedList();
    }

    private static void convert(String s, StringBuilder stringbuilder, String s1)
        throws UnsupportedEncodingException
    {
        byte abyte0[] = s.getBytes(s1);
        for(int i = 0; i < abyte0.length; i++)
        {
            stringbuilder.append('%');
            stringbuilder.append("0123456789ABCDEF".charAt((0xf0 & abyte0[i]) >> 4));
            stringbuilder.append("0123456789ABCDEF".charAt(0xf & abyte0[i]));
        }

    }

    public static String encode(String s, String s1)
        throws UnsupportedEncodingException
    {
        if(s == null || s1 == null)
            throw new NullPointerException();
        "".getBytes(s1);
        StringBuilder stringbuilder = new StringBuilder(16 + s.length());
        int i = -1;
        int j = 0;
        while(j < s.length()) 
        {
            char c = s.charAt(j);
            if(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || " .-*_'(),<>=?@[]{}:~\"\\/;!".indexOf(c) > -1)
            {
                if(i >= 0)
                {
                    convert(s.substring(i, j), stringbuilder, s1);
                    i = -1;
                }
                if(c != ' ')
                    stringbuilder.append(c);
                else
                    stringbuilder.append(' ');
            } else
            if(i < 0)
                i = j;
            j++;
        }
        if(i >= 0)
            convert(s.substring(i, s.length()), stringbuilder, s1);
        return stringbuilder.toString();
    }

    public void destroy()
    {
        stopServer();
    }

    public String getJavascript()
    {
        this;
        JVM INSTR monitorenter ;
        String s1;
        if(javascript.size() == 0)
        {
            s1 = null;
        } else
        {
            String s = (String)javascript.remove(0);
            if(javascript.size() == 0)
                empty = true;
            s1 = s;
        }
        return s1;
    }

    public int getPort()
    {
        return port;
    }

    public int getSize()
    {
        this;
        JVM INSTR monitorenter ;
        int i = javascript.size();
        return i;
    }

    public String getToken()
    {
        return token;
    }

    public void init(String s)
    {
        active = false;
        empty = true;
        port = 0;
        javascript = new LinkedList();
        if(s != null && !s.startsWith("file://"))
        {
            usePolling = true;
            stopServer();
        } else
        if(Proxy.getDefaultHost() != null)
        {
            usePolling = true;
            stopServer();
        } else
        {
            usePolling = false;
            startServer();
        }
    }

    public void reinit(String s)
    {
        stopServer();
        init(s);
    }

    public void restartServer()
    {
        stopServer();
        startServer();
    }

    public void run()
    {
        ServerSocket serversocket;
        active = true;
        serversocket = new ServerSocket(0);
        port = serversocket.getLocalPort();
        token = UUID.randomUUID().toString();
_L11:
        if(!active) goto _L2; else goto _L1
_L1:
        BufferedReader bufferedreader;
        DataOutputStream dataoutputstream;
        String s;
        Socket socket = serversocket.accept();
        bufferedreader = new BufferedReader(new InputStreamReader(socket.getInputStream()), 40);
        dataoutputstream = new DataOutputStream(socket.getOutputStream());
        s = bufferedreader.readLine();
        if(!active || s == null) goto _L4; else goto _L3
_L3:
        if(!s.contains("GET")) goto _L6; else goto _L5
_L5:
        String as[] = s.split(" ");
        if(as.length != 3 || !as[1].substring(1).equals(token))
            break MISSING_BLOCK_LABEL_289;
        this;
        JVM INSTR monitorenter ;
_L13:
        boolean flag = empty;
        if(!flag)
            break MISSING_BLOCK_LABEL_162;
        wait(10000L);
        this;
        JVM INSTR monitorexit ;
        if(!active) goto _L8; else goto _L7
_L7:
        if(!empty) goto _L10; else goto _L9
_L9:
        String s1 = "HTTP/1.1 404 NO DATA\r\n\r\n ";
_L12:
        dataoutputstream.writeBytes(s1);
        dataoutputstream.flush();
_L4:
        dataoutputstream.close();
        bufferedreader.close();
          goto _L11
        IOException ioexception;
        ioexception;
        ioexception.printStackTrace();
_L2:
        active = false;
        return;
        Exception exception;
        exception;
        this;
        JVM INSTR monitorexit ;
        throw exception;
_L10:
        s1 = "HTTP/1.1 200 OK\r\n\r\n";
        String s2 = getJavascript();
        if(s2 != null)
            s1 = (new StringBuilder()).append(s1).append(encode(s2, "UTF-8")).toString();
          goto _L12
_L6:
        s1 = "HTTP/1.1 400 Bad Request\r\n\r\n ";
          goto _L12
        Exception exception1;
        exception1;
          goto _L13
_L8:
        s1 = "HTTP/1.1 503 Service Unavailable\r\n\r\n ";
          goto _L12
        s1 = "HTTP/1.1 403 Forbidden\r\n\r\n ";
          goto _L12
    }

    public void sendJavascript(String s)
    {
        this;
        JVM INSTR monitorenter ;
        javascript.add(s);
        empty = false;
        notify();
        return;
    }

    public void startServer()
    {
        active = false;
        serverThread = new Thread(this);
        serverThread.start();
    }

    public void stopServer()
    {
        if(!active)
            break MISSING_BLOCK_LABEL_28;
        active = false;
        this;
        JVM INSTR monitorenter ;
        notify();
    }

    public boolean usePolling()
    {
        return usePolling;
    }

    private static final String LOG_TAG = "CallbackServer";
    static final String digits = "0123456789ABCDEF";
    private boolean active;
    private boolean empty;
    private LinkedList javascript;
    private int port;
    private Thread serverThread;
    private String token;
    private boolean usePolling;
}
