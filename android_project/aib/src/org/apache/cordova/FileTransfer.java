// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.ContentResolver;
import android.net.Uri;
import android.util.Log;
import android.webkit.CookieManager;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Iterator;
import javax.net.ssl.*;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

// Referenced classes of package org.apache.cordova:
//            FileUtils, FileUploadResult

public class FileTransfer extends Plugin
{

    public FileTransfer()
    {
        defaultSSLSocketFactory = null;
        defaultHostnameVerifier = null;
    }

    private JSONObject createFileTransferError(int i, String s, String s1)
    {
        JSONObject jsonobject = null;
        JSONObject jsonobject1 = new JSONObject();
        jsonobject1.put("code", i);
        jsonobject1.put("source", s);
        jsonobject1.put("target", s1);
        jsonobject = jsonobject1;
_L2:
        return jsonobject;
        JSONException jsonexception2;
        jsonexception2;
        JSONException jsonexception1 = jsonexception2;
_L3:
        Log.e("FileTransfer", jsonexception1.getMessage(), jsonexception1);
        if(true) goto _L2; else goto _L1
_L1:
        JSONException jsonexception;
        jsonexception;
        jsonexception1 = jsonexception;
        jsonobject = jsonobject1;
          goto _L3
    }

    private String getArgument(JSONArray jsonarray, int i, String s)
    {
        String s1 = s;
        if(jsonarray.length() >= i)
        {
            s1 = jsonarray.optString(i);
            if(s1 == null || "null".equals(s1))
                s1 = s;
        }
        return s1;
    }

    private InputStream getPathFromUri(String s)
        throws FileNotFoundException
    {
        Object obj;
        if(s.startsWith("content:"))
        {
            Uri uri = Uri.parse(s);
            obj = ctx.getContentResolver().openInputStream(uri);
        } else
        if(s.startsWith("file://"))
        {
            int i = s.indexOf("?");
            if(i == -1)
                obj = new FileInputStream(s.substring(7));
            else
                obj = new FileInputStream(s.substring(7, i));
        } else
        {
            obj = new FileInputStream(s);
        }
        return ((InputStream) (obj));
    }

    private void trustAllHosts()
    {
        TrustManager atrustmanager[];
        atrustmanager = new TrustManager[1];
        atrustmanager[0] = new X509TrustManager() {

            public void checkClientTrusted(X509Certificate ax509certificate[], String s)
                throws CertificateException
            {
            }

            public void checkServerTrusted(X509Certificate ax509certificate[], String s)
                throws CertificateException
            {
            }

            public X509Certificate[] getAcceptedIssuers()
            {
                return new X509Certificate[0];
            }

            final FileTransfer this$0;

            
            {
                this$0 = FileTransfer.this;
                super();
            }
        };
        defaultSSLSocketFactory = HttpsURLConnection.getDefaultSSLSocketFactory();
        SSLContext sslcontext = SSLContext.getInstance("TLS");
        sslcontext.init(null, atrustmanager, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());
_L1:
        return;
        Exception exception;
        exception;
        Log.e("FileTransfer", exception.getMessage(), exception);
          goto _L1
    }

    public JSONObject download(String s, String s1)
        throws IOException
    {
        File file;
        FileOutputStream fileoutputstream;
        try
        {
            file = new File(s1);
            file.getParentFile().mkdirs();
            URL url = new URL(s);
            HttpURLConnection httpurlconnection = (HttpURLConnection)url.openConnection();
            httpurlconnection.setRequestMethod("GET");
            httpurlconnection.connect();
            Log.d("FileTransfer", (new StringBuilder()).append("Download file:").append(url).toString());
            InputStream inputstream = httpurlconnection.getInputStream();
            byte abyte0[] = new byte[1024];
            fileoutputstream = new FileOutputStream(file);
            do
            {
                int i = inputstream.read(abyte0);
                if(i <= 0)
                    break;
                fileoutputstream.write(abyte0, 0, i);
            } while(true);
        }
        catch(Exception exception)
        {
            Log.d("FileTransfer", exception.getMessage(), exception);
            throw new IOException("Error while downloading");
        }
        JSONObject jsonobject;
        fileoutputstream.close();
        Log.d("FileTransfer", (new StringBuilder()).append("Saved file: ").append(s1).toString());
        jsonobject = (new FileUtils()).getEntry(file);
        return jsonobject;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        PluginResult pluginresult;
        String s2;
        String s3;
        try
        {
            s2 = jsonarray.getString(0);
            s3 = jsonarray.getString(1);
        }
        catch(JSONException jsonexception)
        {
            Log.d("FileTransfer", "Missing source or target");
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION, "Missing source or target");
            continue; /* Loop/switch isn't completed */
        }
        if(!s.equals("upload")) goto _L2; else goto _L1
_L1:
        FileUploadResult fileuploadresult = upload(s2, s3, getArgument(jsonarray, 2, "file"), getArgument(jsonarray, 3, "image.jpg"), getArgument(jsonarray, 4, "image/jpeg"), jsonarray.optJSONObject(5), jsonarray.optBoolean(6), jsonarray.optBoolean(7));
        Log.d("FileTransfer", "****** About to return a result from upload");
        pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, fileuploadresult.toJSONObject());
_L4:
        return pluginresult;
_L2:
        FileNotFoundException filenotfoundexception;
        JSONObject jsonobject3;
        if(s.equals("download"))
        {
            JSONObject jsonobject4 = download(s2, s3);
            Log.d("FileTransfer", "****** About to return a result from download");
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, jsonobject4);
            continue; /* Loop/switch isn't completed */
        }
        try
        {
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.INVALID_ACTION);
        }
        // Misplaced declaration of an exception variable
        catch(FileNotFoundException filenotfoundexception)
        {
            Log.e("FileTransfer", filenotfoundexception.getMessage(), filenotfoundexception);
            jsonobject3 = createFileTransferError(FILE_NOT_FOUND_ERR, s2, s3);
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, jsonobject3);
        }
        catch(IllegalArgumentException illegalargumentexception)
        {
            Log.e("FileTransfer", illegalargumentexception.getMessage(), illegalargumentexception);
            JSONObject jsonobject2 = createFileTransferError(INVALID_URL_ERR, s2, s3);
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, jsonobject2);
        }
        catch(SSLException sslexception)
        {
            Log.e("FileTransfer", sslexception.getMessage(), sslexception);
            Log.d("FileTransfer", "Got my ssl exception!!!");
            JSONObject jsonobject1 = createFileTransferError(CONNECTION_ERR, s2, s3);
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, jsonobject1);
        }
        catch(IOException ioexception)
        {
            Log.e("FileTransfer", ioexception.getMessage(), ioexception);
            JSONObject jsonobject = createFileTransferError(CONNECTION_ERR, s2, s3);
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.IO_EXCEPTION, jsonobject);
        }
        catch(JSONException jsonexception1)
        {
            Log.e("FileTransfer", jsonexception1.getMessage(), jsonexception1);
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
        }
        if(true) goto _L4; else goto _L3
_L3:
    }

    public FileUploadResult upload(String s, String s1, String s2, String s3, String s4, JSONObject jsonobject, boolean flag, 
            boolean flag1)
        throws IOException, SSLException
    {
        FileUploadResult fileuploadresult = new FileUploadResult();
        InputStream inputstream = getPathFromUri(s);
        URL url = new URL(s1);
        Object obj;
        String s5;
        DataOutputStream dataoutputstream;
        int i;
        byte abyte0[];
        int j;
        long l;
        if(url.getProtocol().toLowerCase().equals("https"))
        {
            if(!flag)
            {
                obj = (HttpsURLConnection)url.openConnection();
            } else
            {
                trustAllHosts();
                HttpsURLConnection httpsurlconnection = (HttpsURLConnection)url.openConnection();
                defaultHostnameVerifier = httpsurlconnection.getHostnameVerifier();
                httpsurlconnection.setHostnameVerifier(DO_NOT_VERIFY);
                obj = httpsurlconnection;
            }
        } else
        {
            obj = (HttpURLConnection)url.openConnection();
        }
        ((HttpURLConnection) (obj)).setDoInput(true);
        ((HttpURLConnection) (obj)).setDoOutput(true);
        ((HttpURLConnection) (obj)).setUseCaches(false);
        ((HttpURLConnection) (obj)).setRequestMethod("POST");
        ((HttpURLConnection) (obj)).setRequestProperty("Connection", "Keep-Alive");
        ((HttpURLConnection) (obj)).setRequestProperty("Content-Type", "multipart/form-data;boundary=*****");
        try
        {
            JSONObject jsonobject1 = jsonobject.getJSONObject("headers");
            String s7;
            String s8;
            for(Iterator iterator1 = jsonobject1.keys(); iterator1.hasNext(); ((HttpURLConnection) (obj)).setRequestProperty(s7, s8))
            {
                s7 = iterator1.next().toString();
                s8 = jsonobject1.getString(s7);
            }

        }
        catch(JSONException jsonexception) { }
        s5 = CookieManager.getInstance().getCookie(s1);
        if(s5 != null)
            ((HttpURLConnection) (obj)).setRequestProperty("Cookie", s5);
        if(flag1)
            ((HttpURLConnection) (obj)).setChunkedStreamingMode(8096);
        dataoutputstream = new DataOutputStream(((HttpURLConnection) (obj)).getOutputStream());
        try
        {
            Iterator iterator = jsonobject.keys();
            do
            {
                if(!iterator.hasNext())
                    break;
                Object obj1 = iterator.next();
                if(obj1.toString() != "headers")
                {
                    dataoutputstream.writeBytes("--*****\r\n");
                    dataoutputstream.writeBytes((new StringBuilder()).append("Content-Disposition: form-data; name=\"").append(obj1.toString()).append("\";").toString());
                    dataoutputstream.writeBytes("\r\n\r\n");
                    dataoutputstream.write(jsonobject.getString(obj1.toString()).getBytes());
                    dataoutputstream.writeBytes("\r\n");
                }
            } while(true);
        }
        catch(JSONException jsonexception1)
        {
            Log.e("FileTransfer", jsonexception1.getMessage(), jsonexception1);
        }
        dataoutputstream.writeBytes("--*****\r\n");
        dataoutputstream.writeBytes((new StringBuilder()).append("Content-Disposition: form-data; name=\"").append(s2).append("\";").append(" filename=\"").append(s3).append("\"").append("\r\n").toString());
        dataoutputstream.writeBytes((new StringBuilder()).append("Content-Type: ").append(s4).append("\r\n").toString());
        dataoutputstream.writeBytes("\r\n");
        i = Math.min(inputstream.available(), 8096);
        abyte0 = new byte[i];
        j = inputstream.read(abyte0, 0, i);
        l = 0L;
        for(; j > 0; j = inputstream.read(abyte0, 0, i))
        {
            l += j;
            fileuploadresult.setBytesSent(l);
            dataoutputstream.write(abyte0, 0, i);
            i = Math.min(inputstream.available(), 8096);
        }

        dataoutputstream.writeBytes("\r\n");
        dataoutputstream.writeBytes("--*****--\r\n");
        inputstream.close();
        dataoutputstream.flush();
        dataoutputstream.close();
        StringBuffer stringbuffer = new StringBuffer("");
        DataInputStream datainputstream;
        try
        {
            datainputstream = new DataInputStream(((HttpURLConnection) (obj)).getInputStream());
        }
        catch(FileNotFoundException filenotfoundexception)
        {
            throw new IOException("Received error from server");
        }
        do
        {
            String s6 = datainputstream.readLine();
            if(s6 == null)
                break;
            stringbuffer.append(s6);
        } while(true);
        Log.d("FileTransfer", "got response from server");
        Log.d("FileTransfer", stringbuffer.toString());
        fileuploadresult.setResponseCode(((HttpURLConnection) (obj)).getResponseCode());
        fileuploadresult.setResponse(stringbuffer.toString());
        datainputstream.close();
        ((HttpURLConnection) (obj)).disconnect();
        if(flag && url.getProtocol().toLowerCase().equals("https"))
        {
            ((HttpsURLConnection)obj).setHostnameVerifier(defaultHostnameVerifier);
            HttpsURLConnection.setDefaultSSLSocketFactory(defaultSSLSocketFactory);
        }
        return fileuploadresult;
    }

    private static final String BOUNDRY = "*****";
    public static int CONNECTION_ERR = 0;
    static final HostnameVerifier DO_NOT_VERIFY = new HostnameVerifier() {

        public boolean verify(String s, SSLSession sslsession)
        {
            return true;
        }

    };
    public static int FILE_NOT_FOUND_ERR = 0;
    public static int INVALID_URL_ERR = 0;
    private static final String LINE_END = "\r\n";
    private static final String LINE_START = "--";
    private static final String LOG_TAG = "FileTransfer";
    private HostnameVerifier defaultHostnameVerifier;
    private SSLSocketFactory defaultSSLSocketFactory;

    static 
    {
        FILE_NOT_FOUND_ERR = 1;
        INVALID_URL_ERR = 2;
        CONNECTION_ERR = 3;
    }
}
