// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.*;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.media.MediaPlayer;
import android.net.Uri;
import android.util.Log;
import java.io.*;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

// Referenced classes of package org.apache.cordova:
//            DirectoryManager, FileUtils, ExifHelper

public class Capture extends Plugin
{

    public Capture()
    {
    }

    private void captureAudio()
    {
        Intent intent = new Intent("android.provider.MediaStore.RECORD_SOUND");
        ctx.startActivityForResult(this, intent, 0);
    }

    private void captureImage()
    {
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        File file = new File(DirectoryManager.getTempDirectoryPath(ctx.getContext()), "Capture.jpg");
        intent.putExtra("output", Uri.fromFile(file));
        imageUri = Uri.fromFile(file);
        ctx.startActivityForResult(this, intent, 1);
    }

    private void captureVideo(double d)
    {
        Intent intent = new Intent("android.media.action.VIDEO_CAPTURE");
        ctx.startActivityForResult(this, intent, 2);
    }

    private JSONObject createErrorObject(int i, String s)
    {
        JSONObject jsonobject = new JSONObject();
        try
        {
            jsonobject.put("code", i);
            jsonobject.put("message", s);
        }
        catch(JSONException jsonexception) { }
        return jsonobject;
    }

    private JSONObject createMediaFile(Uri uri)
    {
        File file;
        JSONObject jsonobject;
        file = new File(FileUtils.getRealPathFromURI(uri, ctx));
        jsonobject = new JSONObject();
        jsonobject.put("name", file.getName());
        jsonobject.put("fullPath", file.getAbsolutePath());
        if(!file.getAbsoluteFile().toString().endsWith(".3gp") && !file.getAbsoluteFile().toString().endsWith(".3gpp"))
            break MISSING_BLOCK_LABEL_144;
        if(uri.toString().contains("/audio/"))
            jsonobject.put("type", "audio/3gpp");
        else
            jsonobject.put("type", "video/3gpp");
_L1:
        JSONException jsonexception;
        jsonobject.put("lastModifiedDate", file.lastModified());
        jsonobject.put("size", file.length());
        break MISSING_BLOCK_LABEL_161;
        try
        {
            jsonobject.put("type", FileUtils.getMimeType(file.getAbsolutePath()));
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            jsonexception.printStackTrace();
            break MISSING_BLOCK_LABEL_161;
        }
          goto _L1
        return jsonobject;
    }

    private JSONObject getAudioVideoData(String s, JSONObject jsonobject, boolean flag)
        throws JSONException
    {
        MediaPlayer mediaplayer = new MediaPlayer();
        try
        {
            mediaplayer.setDataSource(s);
            mediaplayer.prepare();
            jsonobject.put("duration", mediaplayer.getDuration() / 1000);
            if(flag)
            {
                jsonobject.put("height", mediaplayer.getVideoHeight());
                jsonobject.put("width", mediaplayer.getVideoWidth());
            }
        }
        catch(IOException ioexception)
        {
            Log.d("Capture", "Error: loading video file");
        }
        return jsonobject;
    }

    private JSONObject getFormatData(String s, String s1)
    {
        JSONObject jsonobject = new JSONObject();
        JSONObject jsonobject1;
        jsonobject.put("height", 0);
        jsonobject.put("width", 0);
        jsonobject.put("bitrate", 0);
        jsonobject.put("duration", 0);
        jsonobject.put("codecs", "");
        if(s1 == null || s1.equals(""))
            s1 = FileUtils.getMimeType(s);
        Log.d("Capture", (new StringBuilder()).append("Mime type = ").append(s1).toString());
        if(s1.equals("image/jpeg") || s.endsWith(".jpg"))
        {
            jsonobject = getImageData(s, jsonobject);
            break MISSING_BLOCK_LABEL_184;
        }
        if(s1.endsWith("audio/3gpp"))
        {
            jsonobject = getAudioVideoData(s, jsonobject, false);
            break MISSING_BLOCK_LABEL_184;
        }
        if(!s1.equals("video/3gpp") && !s1.equals("video/mp4"))
            break MISSING_BLOCK_LABEL_184;
        jsonobject1 = getAudioVideoData(s, jsonobject, true);
        jsonobject = jsonobject1;
        break MISSING_BLOCK_LABEL_184;
        JSONException jsonexception;
        jsonexception;
        Log.d("Capture", "Error: setting media file data object");
        return jsonobject;
    }

    private JSONObject getImageData(String s, JSONObject jsonobject)
        throws JSONException
    {
        Bitmap bitmap = BitmapFactory.decodeFile(s);
        jsonobject.put("height", bitmap.getHeight());
        jsonobject.put("width", bitmap.getWidth());
        return jsonobject;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        callbackId = s1;
        limit = 1L;
        duration = 0.0D;
        results = new JSONArray();
        JSONObject jsonobject = jsonarray.optJSONObject(0);
        if(jsonobject != null)
        {
            limit = jsonobject.optLong("limit", 1L);
            duration = jsonobject.optDouble("duration", 0.0D);
        }
        if(!s.equals("getFormatData")) goto _L2; else goto _L1
_L1:
        PluginResult pluginresult1;
        try
        {
            JSONObject jsonobject1 = getFormatData(jsonarray.getString(0), jsonarray.getString(1));
            pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, jsonobject1);
        }
        catch(JSONException jsonexception)
        {
            pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.ERROR);
        }
_L4:
        return pluginresult1;
_L2:
        if(!s.equals("captureAudio"))
            break; /* Loop/switch isn't completed */
        captureAudio();
_L5:
        PluginResult pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.NO_RESULT);
        pluginresult.setKeepCallback(true);
        pluginresult1 = pluginresult;
        if(true) goto _L4; else goto _L3
_L3:
        if(s.equals("captureImage"))
            captureImage();
        else
        if(s.equals("captureVideo"))
            captureVideo(duration);
          goto _L5
        if(true) goto _L4; else goto _L6
_L6:
    }

    public void fail(JSONObject jsonobject)
    {
        error(new PluginResult(org.apache.cordova.api.PluginResult.Status.ERROR, jsonobject), callbackId);
    }

    public void onActivityResult(int i, int j, Intent intent)
    {
        if(j != -1) goto _L2; else goto _L1
_L1:
        if(i != 0) goto _L4; else goto _L3
_L3:
        Uri uri4 = intent.getData();
        results.put(createMediaFile(uri4));
        if((long)results.length() >= limit)
            success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, results), callbackId);
        else
            captureAudio();
_L8:
        return;
_L4:
        if(i != 1)
            break MISSING_BLOCK_LABEL_396;
        ExifHelper exifhelper;
        Bitmap bitmap;
        ContentValues contentvalues;
        exifhelper = new ExifHelper();
        exifhelper.createInFile((new StringBuilder()).append(DirectoryManager.getTempDirectoryPath(ctx.getContext())).append("/Capture.jpg").toString());
        exifhelper.readExifData();
        bitmap = android.provider.MediaStore.Images.Media.getBitmap(ctx.getContentResolver(), imageUri);
        contentvalues = new ContentValues();
        contentvalues.put("mime_type", "image/jpeg");
        Uri uri3 = ctx.getContentResolver().insert(android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentvalues);
        Uri uri2 = uri3;
_L6:
        try
        {
            OutputStream outputstream = ctx.getContentResolver().openOutputStream(uri2);
            bitmap.compress(android.graphics.Bitmap.CompressFormat.JPEG, 100, outputstream);
            outputstream.close();
            bitmap.recycle();
            System.gc();
            exifhelper.createOutFile(FileUtils.getRealPathFromURI(uri2, ctx));
            exifhelper.writeExifData();
            results.put(createMediaFile(uri2));
            if((long)results.length() >= limit)
            {
                success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, results), callbackId);
                continue; /* Loop/switch isn't completed */
            }
        }
        catch(IOException ioexception)
        {
            ioexception.printStackTrace();
            fail(createErrorObject(0, "Error capturing image."));
            continue; /* Loop/switch isn't completed */
        }
        break; /* Loop/switch isn't completed */
        UnsupportedOperationException unsupportedoperationexception;
        unsupportedoperationexception;
        LOG.d("Capture", "Can't write to external media storage.");
        Uri uri1 = ctx.getContentResolver().insert(android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI, contentvalues);
        uri2 = uri1;
        if(true) goto _L6; else goto _L5
        UnsupportedOperationException unsupportedoperationexception1;
        unsupportedoperationexception1;
        LOG.d("Capture", "Can't write to internal media storage.");
        fail(createErrorObject(0, "Error capturing image - no media storage found."));
        continue; /* Loop/switch isn't completed */
_L5:
        captureImage();
        continue; /* Loop/switch isn't completed */
        if(i == 2)
        {
            Uri uri = intent.getData();
            results.put(createMediaFile(uri));
            if((long)results.length() >= limit)
                success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, results), callbackId);
            else
                captureVideo(duration);
        }
        continue; /* Loop/switch isn't completed */
_L2:
        if(j == 0)
        {
            if(results.length() > 0)
                success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, results), callbackId);
            else
                fail(createErrorObject(3, "Canceled."));
        } else
        if(results.length() > 0)
            success(new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, results), callbackId);
        else
            fail(createErrorObject(3, "Did not complete!"));
        if(true) goto _L8; else goto _L7
_L7:
    }

    private static final String AUDIO_3GPP = "audio/3gpp";
    private static final int CAPTURE_APPLICATION_BUSY = 1;
    private static final int CAPTURE_AUDIO = 0;
    private static final int CAPTURE_IMAGE = 1;
    private static final int CAPTURE_INTERNAL_ERR = 0;
    private static final int CAPTURE_INVALID_ARGUMENT = 2;
    private static final int CAPTURE_NOT_SUPPORTED = 20;
    private static final int CAPTURE_NO_MEDIA_FILES = 3;
    private static final int CAPTURE_VIDEO = 2;
    private static final String IMAGE_JPEG = "image/jpeg";
    private static final String LOG_TAG = "Capture";
    private static final String VIDEO_3GPP = "video/3gpp";
    private static final String VIDEO_MP4 = "video/mp4";
    private String callbackId;
    private double duration;
    private Uri imageUri;
    private long limit;
    private JSONArray results;
}
