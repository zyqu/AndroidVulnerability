// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.*;
import android.util.Log;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.*;

public class BatteryListener extends Plugin
{

    public BatteryListener()
    {
        batteryCallbackId = null;
        receiver = null;
    }

    private JSONObject getBatteryInfo(Intent intent)
    {
        JSONObject jsonobject = new JSONObject();
        jsonobject.put("level", intent.getIntExtra("level", 0));
        if(intent.getIntExtra("plugged", -1) <= 0) goto _L2; else goto _L1
_L1:
        boolean flag = true;
_L3:
        jsonobject.put("isPlugged", flag);
_L4:
        return jsonobject;
_L2:
        flag = false;
          goto _L3
        JSONException jsonexception;
        jsonexception;
        Log.e("BatteryManager", jsonexception.getMessage(), jsonexception);
          goto _L4
    }

    private void removeBatteryListener()
    {
        if(receiver == null)
            break MISSING_BLOCK_LABEL_25;
        ctx.unregisterReceiver(receiver);
        receiver = null;
_L1:
        return;
        Exception exception;
        exception;
        Log.e("BatteryManager", (new StringBuilder()).append("Error unregistering battery receiver: ").append(exception.getMessage()).toString(), exception);
          goto _L1
    }

    private void sendUpdate(JSONObject jsonobject, boolean flag)
    {
        if(batteryCallbackId != null)
        {
            PluginResult pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, jsonobject);
            pluginresult.setKeepCallback(flag);
            success(pluginresult, batteryCallbackId);
        }
    }

    private void updateBatteryInfo(Intent intent)
    {
        sendUpdate(getBatteryInfo(intent), true);
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.INVALID_ACTION;
        String s2 = (new StringBuilder()).append("Unsupported Operation: ").append(s).toString();
        PluginResult pluginresult;
        if(s.equals("start"))
        {
            if(batteryCallbackId != null)
            {
                pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.ERROR, "Battery listener already running.");
            } else
            {
                batteryCallbackId = s1;
                IntentFilter intentfilter = new IntentFilter();
                intentfilter.addAction("android.intent.action.BATTERY_CHANGED");
                if(receiver == null)
                {
                    receiver = new BroadcastReceiver() {

                        public void onReceive(Context context, Intent intent)
                        {
                            updateBatteryInfo(intent);
                        }

                        final BatteryListener this$0;

            
            {
                this$0 = BatteryListener.this;
                super();
            }
                    };
                    ctx.registerReceiver(receiver, intentfilter);
                }
                PluginResult pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.NO_RESULT);
                pluginresult1.setKeepCallback(true);
                pluginresult = pluginresult1;
            }
        } else
        if(s.equals("stop"))
        {
            removeBatteryListener();
            sendUpdate(new JSONObject(), false);
            batteryCallbackId = null;
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK);
        } else
        {
            pluginresult = new PluginResult(status, s2);
        }
        return pluginresult;
    }

    public void onDestroy()
    {
        removeBatteryListener();
    }

    private static final String LOG_TAG = "BatteryManager";
    private String batteryCallbackId;
    BroadcastReceiver receiver;

}
