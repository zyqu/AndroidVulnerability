// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.media.AudioManager;
import java.io.PrintStream;
import java.util.*;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.JSONArray;
import org.json.JSONException;

// Referenced classes of package org.apache.cordova:
//            AudioPlayer

public class AudioHandler extends Plugin
{

    public AudioHandler()
    {
        players = new HashMap();
        pausedForPhone = new ArrayList();
    }

    private boolean release(String s)
    {
        boolean flag;
        if(!players.containsKey(s))
        {
            flag = false;
        } else
        {
            AudioPlayer audioplayer = (AudioPlayer)players.get(s);
            players.remove(s);
            audioplayer.destroy();
            flag = true;
        }
        return flag;
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.OK;
        if(!s.equals("startRecordingAudio")) goto _L2; else goto _L1
_L1:
        startRecordingAudio(jsonarray.getString(0), jsonarray.getString(1));
_L4:
        PluginResult pluginresult;
        pluginresult = new PluginResult(status, "");
        break; /* Loop/switch isn't completed */
_L2:
        JSONException jsonexception;
        if(s.equals("stopRecordingAudio"))
        {
            stopRecordingAudio(jsonarray.getString(0));
            continue; /* Loop/switch isn't completed */
        }
        boolean flag;
        try
        {
            if(s.equals("startPlayingAudio"))
            {
                startPlayingAudio(jsonarray.getString(0), jsonarray.getString(1));
                continue; /* Loop/switch isn't completed */
            }
            if(s.equals("seekToAudio"))
            {
                seekToAudio(jsonarray.getString(0), jsonarray.getInt(1));
                continue; /* Loop/switch isn't completed */
            }
            if(s.equals("pausePlayingAudio"))
            {
                pausePlayingAudio(jsonarray.getString(0));
                continue; /* Loop/switch isn't completed */
            }
            if(s.equals("stopPlayingAudio"))
            {
                stopPlayingAudio(jsonarray.getString(0));
                continue; /* Loop/switch isn't completed */
            }
            flag = s.equals("setVolume");
        }
        // Misplaced declaration of an exception variable
        catch(JSONException jsonexception)
        {
            jsonexception.printStackTrace();
            pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.JSON_EXCEPTION);
            break; /* Loop/switch isn't completed */
        }
        if(!flag)
            break; /* Loop/switch isn't completed */
        setVolume(jsonarray.getString(0), Float.parseFloat(jsonarray.getString(1)));
        continue; /* Loop/switch isn't completed */
        NumberFormatException numberformatexception;
        numberformatexception;
        if(true) goto _L4; else goto _L3
_L3:
        if(s.equals("getCurrentPositionAudio"))
        {
            pluginresult = new PluginResult(status, getCurrentPositionAudio(jsonarray.getString(0)));
            break; /* Loop/switch isn't completed */
        }
        if(s.equals("getDurationAudio"))
        {
            pluginresult = new PluginResult(status, getDurationAudio(jsonarray.getString(0), jsonarray.getString(1)));
            break; /* Loop/switch isn't completed */
        }
        if(!s.equals("release"))
            continue; /* Loop/switch isn't completed */
        pluginresult = new PluginResult(status, release(jsonarray.getString(0)));
        break; /* Loop/switch isn't completed */
        if(true) goto _L4; else goto _L5
_L5:
        return pluginresult;
    }

    public int getAudioOutputDevice()
    {
        AudioManager audiomanager = (AudioManager)ctx.getSystemService("audio");
        int i;
        if(audiomanager.getRouting(0) == 1)
            i = 1;
        else
        if(audiomanager.getRouting(0) == 2)
            i = 2;
        else
            i = -1;
        return i;
    }

    public float getCurrentPositionAudio(String s)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        float f;
        if(audioplayer != null)
            f = (float)audioplayer.getCurrentPosition() / 1000F;
        else
            f = -1F;
        return f;
    }

    public float getDurationAudio(String s, String s1)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        float f;
        if(audioplayer != null)
        {
            f = audioplayer.getDuration(s1);
        } else
        {
            AudioPlayer audioplayer1 = new AudioPlayer(this, s);
            players.put(s, audioplayer1);
            f = audioplayer1.getDuration(s1);
        }
        return f;
    }

    public boolean isSynch(String s)
    {
        boolean flag;
        if(s.equals("getCurrentPositionAudio"))
            flag = true;
        else
        if(s.equals("getDurationAudio"))
            flag = true;
        else
            flag = false;
        return flag;
    }

    public void onDestroy()
    {
        for(Iterator iterator = players.values().iterator(); iterator.hasNext(); ((AudioPlayer)iterator.next()).destroy());
        players.clear();
    }

    public void onMessage(String s, Object obj)
    {
        if(s.equals("telephone"))
            if("ringing".equals(obj) || "offhook".equals(obj))
            {
                Iterator iterator = players.values().iterator();
                do
                {
                    if(!iterator.hasNext())
                        break;
                    AudioPlayer audioplayer = (AudioPlayer)iterator.next();
                    if(audioplayer.getState() == AudioPlayer.MEDIA_RUNNING)
                    {
                        pausedForPhone.add(audioplayer);
                        audioplayer.pausePlaying();
                    }
                } while(true);
            } else
            if("idle".equals(obj))
            {
                for(Iterator iterator1 = pausedForPhone.iterator(); iterator1.hasNext(); ((AudioPlayer)iterator1.next()).startPlaying(null));
                pausedForPhone.clear();
            }
    }

    public void pausePlayingAudio(String s)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer != null)
            audioplayer.pausePlaying();
    }

    public void seekToAudio(String s, int i)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer != null)
            audioplayer.seekToPlaying(i);
    }

    public void setAudioOutputDevice(int i)
    {
        AudioManager audiomanager = (AudioManager)ctx.getSystemService("audio");
        if(i == 2)
            audiomanager.setRouting(0, 2, -1);
        else
        if(i == 1)
            audiomanager.setRouting(0, 1, -1);
        else
            System.out.println("AudioHandler.setAudioOutputDevice() Error: Unknown output device.");
    }

    public void setVolume(String s, float f)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer != null)
            audioplayer.setVolume(f);
        else
            System.out.println((new StringBuilder()).append("AudioHandler.setVolume() Error: Unknown Audio Player ").append(s).toString());
    }

    public void startPlayingAudio(String s, String s1)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer == null)
        {
            audioplayer = new AudioPlayer(this, s);
            players.put(s, audioplayer);
        }
        audioplayer.startPlaying(s1);
    }

    public void startRecordingAudio(String s, String s1)
    {
        if(!players.containsKey(s))
        {
            AudioPlayer audioplayer = new AudioPlayer(this, s);
            players.put(s, audioplayer);
            audioplayer.startRecording(s1);
        }
    }

    public void stopPlayingAudio(String s)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer != null)
            audioplayer.stopPlaying();
    }

    public void stopRecordingAudio(String s)
    {
        AudioPlayer audioplayer = (AudioPlayer)players.get(s);
        if(audioplayer != null)
        {
            audioplayer.stopRecording();
            players.remove(s);
        }
    }

    public static String TAG = "AudioHandler";
    ArrayList pausedForPhone;
    HashMap players;

}
