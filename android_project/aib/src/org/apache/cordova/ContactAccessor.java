// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.Context;
import android.util.Log;
import android.webkit.WebView;
import java.util.HashMap;
import org.json.*;

public abstract class ContactAccessor
{
    class WhereOptions
    {

        public String getWhere()
        {
            return where;
        }

        public String[] getWhereArgs()
        {
            return whereArgs;
        }

        public void setWhere(String s)
        {
            where = s;
        }

        public void setWhereArgs(String as[])
        {
            whereArgs = as;
        }

        final ContactAccessor this$0;
        private String where;
        private String whereArgs[];

        WhereOptions()
        {
            this$0 = ContactAccessor.this;
            super();
        }
    }


    public ContactAccessor()
    {
    }

    protected HashMap buildPopulationSet(JSONArray jsonarray)
    {
        HashMap hashmap = new HashMap();
        if(jsonarray.length() != 1 || !jsonarray.getString(0).equals("*")) goto _L2; else goto _L1
_L1:
        hashmap.put("displayName", Boolean.valueOf(true));
        hashmap.put("name", Boolean.valueOf(true));
        hashmap.put("nickname", Boolean.valueOf(true));
        hashmap.put("phoneNumbers", Boolean.valueOf(true));
        hashmap.put("emails", Boolean.valueOf(true));
        hashmap.put("addresses", Boolean.valueOf(true));
        hashmap.put("ims", Boolean.valueOf(true));
        hashmap.put("organizations", Boolean.valueOf(true));
        hashmap.put("birthday", Boolean.valueOf(true));
        hashmap.put("note", Boolean.valueOf(true));
        hashmap.put("urls", Boolean.valueOf(true));
        hashmap.put("photos", Boolean.valueOf(true));
        hashmap.put("categories", Boolean.valueOf(true));
          goto _L3
_L5:
        int i;
        if(i < jsonarray.length())
        {
            String s = jsonarray.getString(i);
            if(s.startsWith("displayName"))
            {
                hashmap.put("displayName", Boolean.valueOf(true));
                break MISSING_BLOCK_LABEL_527;
            }
            JSONException jsonexception;
            if(s.startsWith("name"))
            {
                hashmap.put("name", Boolean.valueOf(true));
                break MISSING_BLOCK_LABEL_527;
            }
            try
            {
                if(s.startsWith("nickname"))
                    hashmap.put("nickname", Boolean.valueOf(true));
                else
                if(s.startsWith("phoneNumbers"))
                    hashmap.put("phoneNumbers", Boolean.valueOf(true));
                else
                if(s.startsWith("emails"))
                    hashmap.put("emails", Boolean.valueOf(true));
                else
                if(s.startsWith("addresses"))
                    hashmap.put("addresses", Boolean.valueOf(true));
                else
                if(s.startsWith("ims"))
                    hashmap.put("ims", Boolean.valueOf(true));
                else
                if(s.startsWith("organizations"))
                    hashmap.put("organizations", Boolean.valueOf(true));
                else
                if(s.startsWith("birthday"))
                    hashmap.put("birthday", Boolean.valueOf(true));
                else
                if(s.startsWith("note"))
                    hashmap.put("note", Boolean.valueOf(true));
                else
                if(s.startsWith("urls"))
                    hashmap.put("urls", Boolean.valueOf(true));
                else
                if(s.startsWith("photos"))
                    hashmap.put("photos", Boolean.valueOf(true));
                else
                if(s.startsWith("categories"))
                    hashmap.put("categories", Boolean.valueOf(true));
                break MISSING_BLOCK_LABEL_527;
            }
            // Misplaced declaration of an exception variable
            catch(JSONException jsonexception)
            {
                Log.e("ContactsAccessor", jsonexception.getMessage(), jsonexception);
            }
        }
_L3:
        return hashmap;
_L2:
        i = 0;
        continue; /* Loop/switch isn't completed */
        i++;
        if(true) goto _L5; else goto _L4
_L4:
    }

    public abstract JSONObject getContactById(String s)
        throws JSONException;

    protected String getJsonString(JSONObject jsonobject, String s)
    {
        String s1;
        s1 = null;
        if(jsonobject == null)
            break MISSING_BLOCK_LABEL_48;
        s1 = jsonobject.getString(s);
        if(!s1.equals("null"))
            break MISSING_BLOCK_LABEL_48;
        Log.d("ContactsAccessor", (new StringBuilder()).append(s).append(" is string called 'null'").toString());
        s1 = null;
_L2:
        return s1;
        JSONException jsonexception;
        jsonexception;
        Log.d("ContactsAccessor", (new StringBuilder()).append("Could not get = ").append(jsonexception.getMessage()).toString());
        if(true) goto _L2; else goto _L1
_L1:
    }

    protected boolean isRequired(String s, HashMap hashmap)
    {
        Boolean boolean1 = (Boolean)hashmap.get(s);
        boolean flag;
        if(boolean1 == null)
            flag = false;
        else
            flag = boolean1.booleanValue();
        return flag;
    }

    public abstract boolean remove(String s);

    public abstract String save(JSONObject jsonobject);

    public abstract JSONArray search(JSONArray jsonarray, JSONObject jsonobject);

    protected final String LOG_TAG = "ContactsAccessor";
    protected Context mApp;
    protected WebView mView;
}
