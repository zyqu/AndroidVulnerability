// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.net.Uri;
import android.net.http.SslError;
import android.webkit.*;
import org.apache.cordova.api.LOG;
import org.apache.cordova.api.PluginManager;

// Referenced classes of package org.apache.cordova:
//            DroidGap, CallbackServer, AuthenticationToken

public class CordovaWebViewClient extends WebViewClient
{

    public CordovaWebViewClient(DroidGap droidgap)
    {
        doClearHistory = false;
        ctx = droidgap;
    }

    public void doUpdateVisitedHistory(WebView webview, String s, boolean flag)
    {
        if(!ctx.peekAtUrlStack().equals(s))
            ctx.pushUrl(s);
    }

    public void onPageFinished(WebView webview, String s)
    {
        super.onPageFinished(webview, s);
        if(doClearHistory)
        {
            webview.clearHistory();
            doClearHistory = false;
        }
        DroidGap droidgap = ctx;
        droidgap.loadUrlTimeout = 1 + droidgap.loadUrlTimeout;
        if(!s.equals("about:blank"))
            ctx.appView.loadUrl("javascript:try{ require('cordova/channel').onNativeReady.fire();}catch(e){_nativeReady = true;}");
        if(ctx.appView.getVisibility() == 4)
            (new Thread(new Runnable() {

                public void run()
                {
                    Thread.sleep(2000L);
                    ctx.runOnUiThread(new Runnable() {

                        public void run()
                        {
                            ctx.appView.setVisibility(0);
                            ctx.spinnerStop();
                        }

                        final _cls1 this$1;

            
            {
                this$1 = _cls1.this;
                super();
            }
                    });
_L2:
                    return;
                    InterruptedException interruptedexception;
                    interruptedexception;
                    if(true) goto _L2; else goto _L1
_L1:
                }

                final CordovaWebViewClient this$0;

            
            {
                this$0 = CordovaWebViewClient.this;
                super();
            }
            })).start();
        if(s.equals("about:blank"))
        {
            if(ctx.callbackServer != null)
                ctx.callbackServer.destroy();
            ctx.endActivity();
        }
    }

    public void onPageStarted(WebView webview, String s, Bitmap bitmap)
    {
        webview.clearHistory();
        doClearHistory = true;
    }

    public void onReceivedError(WebView webview, int i, String s, String s1)
    {
        Object aobj[] = new Object[3];
        aobj[0] = Integer.valueOf(i);
        aobj[1] = s;
        aobj[2] = s1;
        LOG.d("Cordova", "DroidGap: GapViewClient.onReceivedError: Error code=%s Description=%s URL=%s", aobj);
        DroidGap droidgap = ctx;
        droidgap.loadUrlTimeout = 1 + droidgap.loadUrlTimeout;
        ctx.spinnerStop();
        ctx.onReceivedError(i, s, s1);
    }

    public void onReceivedHttpAuthRequest(WebView webview, HttpAuthHandler httpauthhandler, String s, String s1)
    {
        AuthenticationToken authenticationtoken = ctx.getAuthenticationToken(s, s1);
        if(authenticationtoken != null)
            httpauthhandler.proceed(authenticationtoken.getUserName(), authenticationtoken.getPassword());
    }

    public void onReceivedSslError(WebView webview, SslErrorHandler sslerrorhandler, SslError sslerror)
    {
        String s = ctx.getPackageName();
        PackageManager packagemanager = ctx.getPackageManager();
        try
        {
            if((2 & packagemanager.getApplicationInfo(s, 128).flags) != 0)
                sslerrorhandler.proceed();
            else
                super.onReceivedSslError(webview, sslerrorhandler, sslerror);
        }
        catch(android.content.pm.PackageManager.NameNotFoundException namenotfoundexception)
        {
            super.onReceivedSslError(webview, sslerrorhandler, sslerror);
        }
    }

    public boolean shouldOverrideUrlLoading(WebView webview, String s)
    {
        if(!ctx.pluginManager.onOverrideUrlLoading(s)) goto _L2; else goto _L1
_L1:
        return true;
_L2:
        if(s.startsWith("tel:"))
        {
            try
            {
                Intent intent4 = new Intent("android.intent.action.DIAL");
                intent4.setData(Uri.parse(s));
                ctx.startActivity(intent4);
            }
            catch(ActivityNotFoundException activitynotfoundexception4)
            {
                LOG.e("Cordova", (new StringBuilder()).append("Error dialing ").append(s).append(": ").append(activitynotfoundexception4.toString()).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        if(s.startsWith("geo:"))
        {
            try
            {
                Intent intent3 = new Intent("android.intent.action.VIEW");
                intent3.setData(Uri.parse(s));
                ctx.startActivity(intent3);
            }
            catch(ActivityNotFoundException activitynotfoundexception3)
            {
                LOG.e("Cordova", (new StringBuilder()).append("Error showing map ").append(s).append(": ").append(activitynotfoundexception3.toString()).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        if(s.startsWith("mailto:"))
        {
            try
            {
                Intent intent2 = new Intent("android.intent.action.VIEW");
                intent2.setData(Uri.parse(s));
                ctx.startActivity(intent2);
            }
            catch(ActivityNotFoundException activitynotfoundexception2)
            {
                LOG.e("Cordova", (new StringBuilder()).append("Error sending email ").append(s).append(": ").append(activitynotfoundexception2.toString()).toString());
            }
            continue; /* Loop/switch isn't completed */
        }
        if(!s.startsWith("sms:")) goto _L4; else goto _L3
_L3:
        Intent intent1;
        int i;
        intent1 = new Intent("android.intent.action.VIEW");
        i = s.indexOf('?');
        if(i != -1) goto _L6; else goto _L5
_L5:
        String s1 = s.substring(4);
_L7:
        ActivityNotFoundException activitynotfoundexception1;
        intent1.setData(Uri.parse((new StringBuilder()).append("sms:").append(s1).toString()));
        intent1.putExtra("address", s1);
        intent1.setType("vnd.android-dir/mms-sms");
        ctx.startActivity(intent1);
        continue; /* Loop/switch isn't completed */
_L6:
        try
        {
            s1 = s.substring(4, i);
            String s2 = Uri.parse(s).getQuery();
            if(s2 != null && s2.startsWith("body="))
                intent1.putExtra("sms_body", s2.substring(5));
        }
        // Misplaced declaration of an exception variable
        catch(ActivityNotFoundException activitynotfoundexception1)
        {
            LOG.e("Cordova", (new StringBuilder()).append("Error sending sms ").append(s).append(":").append(activitynotfoundexception1.toString()).toString());
            continue; /* Loop/switch isn't completed */
        }
        if(true) goto _L7; else goto _L4
_L4:
        if(s.startsWith("file://") || s.indexOf(ctx.baseUrl) == 0 || ctx.isUrlWhiteListed(s))
            ctx.loadUrl(s);
        else
            try
            {
                Intent intent = new Intent("android.intent.action.VIEW");
                intent.setData(Uri.parse(s));
                ctx.startActivity(intent);
            }
            catch(ActivityNotFoundException activitynotfoundexception)
            {
                LOG.e("Cordova", (new StringBuilder()).append("Error loading url ").append(s).toString(), activitynotfoundexception);
            }
        if(true) goto _L1; else goto _L8
_L8:
    }

    private static final String TAG = "Cordova";
    DroidGap ctx;
    private boolean doClearHistory;
}
