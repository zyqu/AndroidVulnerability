// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova;

import android.content.*;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;
import org.apache.cordova.api.CordovaInterface;
import org.apache.cordova.api.Plugin;
import org.apache.cordova.api.PluginResult;
import org.json.JSONArray;

public class NetworkManager extends Plugin
{

    public NetworkManager()
    {
        receiver = null;
    }

    private String getConnectionInfo(NetworkInfo networkinfo)
    {
        String s = "none";
        if(networkinfo != null)
            if(!networkinfo.isConnected())
                s = "none";
            else
                s = getType(networkinfo);
        return s;
    }

    private String getType(NetworkInfo networkinfo)
    {
        if(networkinfo == null) goto _L2; else goto _L1
_L1:
        String s1 = networkinfo.getTypeName();
        if(!s1.toLowerCase().equals("wifi")) goto _L4; else goto _L3
_L3:
        String s = "wifi";
_L6:
        return s;
_L2:
        s = "none";
        continue; /* Loop/switch isn't completed */
_L4:
        if(s1.toLowerCase().equals("mobile"))
        {
            String s2 = networkinfo.getSubtypeName();
            if(s2.toLowerCase().equals("gsm") || s2.toLowerCase().equals("gprs") || s2.toLowerCase().equals("edge"))
            {
                s = "2g";
                continue; /* Loop/switch isn't completed */
            }
            if(s2.toLowerCase().startsWith("cdma") || s2.toLowerCase().equals("umts") || s2.toLowerCase().equals("1xrtt") || s2.toLowerCase().equals("ehrpd") || s2.toLowerCase().equals("hsupa") || s2.toLowerCase().equals("hsdpa") || s2.toLowerCase().equals("hspa"))
            {
                s = "3g";
                continue; /* Loop/switch isn't completed */
            }
            if(s2.toLowerCase().equals("lte") || s2.toLowerCase().equals("umb") || s2.toLowerCase().equals("hspa+"))
            {
                s = "4g";
                continue; /* Loop/switch isn't completed */
            }
        }
        s = "unknown";
        if(true) goto _L6; else goto _L5
_L5:
    }

    private void sendUpdate(String s)
    {
        PluginResult pluginresult = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, s);
        pluginresult.setKeepCallback(true);
        success(pluginresult, connectionCallbackId);
        ctx.postMessage("networkconnection", s);
    }

    private void updateConnectionInfo(NetworkInfo networkinfo)
    {
        sendUpdate(getConnectionInfo(networkinfo));
    }

    public PluginResult execute(String s, JSONArray jsonarray, String s1)
    {
        org.apache.cordova.api.PluginResult.Status status = org.apache.cordova.api.PluginResult.Status.INVALID_ACTION;
        String s2 = (new StringBuilder()).append("Unsupported Operation: ").append(s).toString();
        PluginResult pluginresult;
        if(s.equals("getConnectionInfo"))
        {
            connectionCallbackId = s1;
            NetworkInfo networkinfo = sockMan.getActiveNetworkInfo();
            PluginResult pluginresult1 = new PluginResult(org.apache.cordova.api.PluginResult.Status.OK, getConnectionInfo(networkinfo));
            pluginresult1.setKeepCallback(true);
            pluginresult = pluginresult1;
        } else
        {
            pluginresult = new PluginResult(status, s2);
        }
        return pluginresult;
    }

    public boolean isSynch(String s)
    {
        return false;
    }

    public void onDestroy()
    {
        if(receiver == null)
            break MISSING_BLOCK_LABEL_20;
        ctx.unregisterReceiver(receiver);
_L1:
        return;
        Exception exception;
        exception;
        Log.e("NetworkManager", (new StringBuilder()).append("Error unregistering network receiver: ").append(exception.getMessage()).toString(), exception);
          goto _L1
    }

    public void setContext(CordovaInterface cordovainterface)
    {
        super.setContext(cordovainterface);
        sockMan = (ConnectivityManager)cordovainterface.getSystemService("connectivity");
        connectionCallbackId = null;
        IntentFilter intentfilter = new IntentFilter();
        intentfilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
        if(receiver == null)
        {
            receiver = new BroadcastReceiver() {

                public void onReceive(Context context, Intent intent)
                {
                    updateConnectionInfo((NetworkInfo)intent.getParcelableExtra("networkInfo"));
                }

                final NetworkManager this$0;

            
            {
                this$0 = NetworkManager.this;
                super();
            }
            };
            cordovainterface.registerReceiver(receiver, intentfilter);
        }
    }

    public static final String CDMA = "cdma";
    public static final String EDGE = "edge";
    public static final String EHRPD = "ehrpd";
    public static final String GPRS = "gprs";
    public static final String GSM = "gsm";
    public static final String HSDPA = "hsdpa";
    public static final String HSPA = "hspa";
    public static final String HSPA_PLUS = "hspa+";
    public static final String HSUPA = "hsupa";
    private static final String LOG_TAG = "NetworkManager";
    public static final String LTE = "lte";
    public static final String MOBILE = "mobile";
    public static int NOT_REACHABLE = 0;
    public static final String ONEXRTT = "1xrtt";
    public static int REACHABLE_VIA_CARRIER_DATA_NETWORK = 0;
    public static int REACHABLE_VIA_WIFI_NETWORK = 0;
    public static final String TYPE_2G = "2g";
    public static final String TYPE_3G = "3g";
    public static final String TYPE_4G = "4g";
    public static final String TYPE_ETHERNET = "ethernet";
    public static final String TYPE_NONE = "none";
    public static final String TYPE_UNKNOWN = "unknown";
    public static final String TYPE_WIFI = "wifi";
    public static final String UMB = "umb";
    public static final String UMTS = "umts";
    public static final String WIFI = "wifi";
    public static final String WIMAX = "wimax";
    private String connectionCallbackId;
    BroadcastReceiver receiver;
    ConnectivityManager sockMan;

    static 
    {
        NOT_REACHABLE = 0;
        REACHABLE_VIA_CARRIER_DATA_NETWORK = 1;
        REACHABLE_VIA_WIFI_NETWORK = 2;
    }

}
