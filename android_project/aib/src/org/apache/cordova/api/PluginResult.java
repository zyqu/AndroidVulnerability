// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova.api;

import org.json.JSONArray;
import org.json.JSONObject;

public class PluginResult
{
    public static final class Status extends Enum
    {

        public static Status valueOf(String s)
        {
            return (Status)Enum.valueOf(org/apache/cordova/api/PluginResult$Status, s);
        }

        public static Status[] values()
        {
            return (Status[])$VALUES.clone();
        }

        private static final Status $VALUES[];
        public static final Status CLASS_NOT_FOUND_EXCEPTION;
        public static final Status ERROR;
        public static final Status ILLEGAL_ACCESS_EXCEPTION;
        public static final Status INSTANTIATION_EXCEPTION;
        public static final Status INVALID_ACTION;
        public static final Status IO_EXCEPTION;
        public static final Status JSON_EXCEPTION;
        public static final Status MALFORMED_URL_EXCEPTION;
        public static final Status NO_RESULT;
        public static final Status OK;

        static 
        {
            NO_RESULT = new Status("NO_RESULT", 0);
            OK = new Status("OK", 1);
            CLASS_NOT_FOUND_EXCEPTION = new Status("CLASS_NOT_FOUND_EXCEPTION", 2);
            ILLEGAL_ACCESS_EXCEPTION = new Status("ILLEGAL_ACCESS_EXCEPTION", 3);
            INSTANTIATION_EXCEPTION = new Status("INSTANTIATION_EXCEPTION", 4);
            MALFORMED_URL_EXCEPTION = new Status("MALFORMED_URL_EXCEPTION", 5);
            IO_EXCEPTION = new Status("IO_EXCEPTION", 6);
            INVALID_ACTION = new Status("INVALID_ACTION", 7);
            JSON_EXCEPTION = new Status("JSON_EXCEPTION", 8);
            ERROR = new Status("ERROR", 9);
            Status astatus[] = new Status[10];
            astatus[0] = NO_RESULT;
            astatus[1] = OK;
            astatus[2] = CLASS_NOT_FOUND_EXCEPTION;
            astatus[3] = ILLEGAL_ACCESS_EXCEPTION;
            astatus[4] = INSTANTIATION_EXCEPTION;
            astatus[5] = MALFORMED_URL_EXCEPTION;
            astatus[6] = IO_EXCEPTION;
            astatus[7] = INVALID_ACTION;
            astatus[8] = JSON_EXCEPTION;
            astatus[9] = ERROR;
            $VALUES = astatus;
        }

        private Status(String s, int i)
        {
            super(s, i);
        }
    }


    public PluginResult(Status status1)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = (new StringBuilder()).append("'").append(StatusMessages[status]).append("'").toString();
    }

    public PluginResult(Status status1, float f)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = (new StringBuilder()).append("").append(f).toString();
    }

    public PluginResult(Status status1, int i)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = (new StringBuilder()).append("").append(i).toString();
    }

    public PluginResult(Status status1, String s)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = JSONObject.quote(s);
    }

    public PluginResult(Status status1, JSONArray jsonarray)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = jsonarray.toString();
    }

    public PluginResult(Status status1, JSONObject jsonobject)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = jsonobject.toString();
    }

    public PluginResult(Status status1, boolean flag)
    {
        keepCallback = false;
        status = status1.ordinal();
        message = (new StringBuilder()).append("").append(flag).toString();
    }

    public String getJSONString()
    {
        return (new StringBuilder()).append("{status:").append(status).append(",message:").append(message).append(",keepCallback:").append(keepCallback).append("}").toString();
    }

    public boolean getKeepCallback()
    {
        return keepCallback;
    }

    public String getMessage()
    {
        return message;
    }

    public int getStatus()
    {
        return status;
    }

    public void setKeepCallback(boolean flag)
    {
        keepCallback = flag;
    }

    public String toErrorCallbackString(String s)
    {
        return (new StringBuilder()).append("require('cordova').callbackError('").append(s).append("', ").append(getJSONString()).append(");").toString();
    }

    public String toSuccessCallbackString(String s)
    {
        return (new StringBuilder()).append("require('cordova').callbackSuccess('").append(s).append("',").append(getJSONString()).append(");").toString();
    }

    public static String StatusMessages[] = {
        "No result", "OK", "Class not found", "Illegal access", "Instantiation error", "Malformed url", "IO error", "Invalid action", "JSON error", "Error"
    };
    private boolean keepCallback;
    private final String message;
    private final int status;

}
