// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.apache.cordova.api;

import android.content.Intent;
import android.content.res.Resources;
import android.content.res.XmlResourceParser;
import android.webkit.WebView;
import java.io.IOException;
import java.io.PrintStream;
import java.util.*;
import org.json.JSONArray;
import org.json.JSONException;
import org.xmlpull.v1.XmlPullParserException;

// Referenced classes of package org.apache.cordova.api:
//            IPlugin, Plugin, PluginResult, CordovaInterface

public class PluginManager
{

    public PluginManager(WebView webview, CordovaInterface cordovainterface)
    {
        plugins = new HashMap();
        services = new HashMap();
        urlMap = new HashMap();
        ctx = cordovainterface;
        app = webview;
        loadPlugins();
    }

    private IPlugin addPlugin(String s, String s1)
    {
        Class class1 = getClassByName(s1);
        if(!isCordovaPlugin(class1)) goto _L2; else goto _L1
_L1:
        IPlugin iplugin1;
        iplugin1 = (IPlugin)class1.newInstance();
        plugins.put(s1, iplugin1);
        iplugin1.setContext(ctx);
        iplugin1.setView(app);
        IPlugin iplugin = iplugin1;
_L4:
        return iplugin;
        Exception exception;
        exception;
        exception.printStackTrace();
        System.out.println((new StringBuilder()).append("Error adding plugin ").append(s1).append(".").toString());
_L2:
        iplugin = null;
        if(true) goto _L4; else goto _L3
_L3:
    }

    private Class getClassByName(String s)
        throws ClassNotFoundException
    {
        Class class1 = null;
        if(s != null)
            class1 = Class.forName(s);
        return class1;
    }

    private IPlugin getPlugin(String s)
    {
        String s1 = (String)services.get(s);
        IPlugin iplugin;
        if(plugins.containsKey(s1))
            iplugin = (IPlugin)plugins.get(s1);
        else
            iplugin = addPlugin(s, s1);
        return iplugin;
    }

    private boolean isCordovaPlugin(Class class1)
    {
        boolean flag;
        if(class1 != null)
        {
            if(org/apache/cordova/api/Plugin.isAssignableFrom(class1) || org/apache/cordova/api/IPlugin.isAssignableFrom(class1))
                flag = true;
            else
                flag = false;
        } else
        {
            flag = false;
        }
        return flag;
    }

    private void pluginConfigurationMissing()
    {
        System.err.println("=====================================================================================");
        System.err.println("ERROR: plugin.xml is missing.  Add res/xml/plugins.xml to your project.");
        System.err.println("https://git-wip-us.apache.org/repos/asf?p=incubator-cordova-android.git;a=blob;f=framework/res/xml/plugins.xml");
        System.err.println("=====================================================================================");
    }

    public void addService(String s, String s1)
    {
        services.put(s, s1);
    }

    public String exec(String s, final String action, final String callbackId, String s1, boolean flag)
    {
        PluginResult pluginresult;
        boolean flag1;
        pluginresult = null;
        flag1 = flag;
        final JSONArray args;
        final IPlugin plugin;
        final CordovaInterface ctx;
        args = new JSONArray(s1);
        plugin = getPlugin(s);
        ctx = this.ctx;
        if(plugin == null) goto _L2; else goto _L1
_L1:
        if(!flag || plugin.isSynch(action))
            break MISSING_BLOCK_LABEL_237;
        flag1 = true;
_L7:
        if(!flag1) goto _L4; else goto _L3
_L3:
        String s2;
        (new Thread(new Runnable() {

            public void run()
            {
                PluginResult pluginresult2;
                try
                {
                    pluginresult2 = plugin.execute(action, args, callbackId);
                    int i = pluginresult2.getStatus();
                    if(i == PluginResult.Status.NO_RESULT.ordinal() && pluginresult2.getKeepCallback())
                        break MISSING_BLOCK_LABEL_144;
                    if(i == PluginResult.Status.OK.ordinal() || i == PluginResult.Status.NO_RESULT.ordinal())
                    {
                        ctx.sendJavascript(pluginresult2.toSuccessCallbackString(callbackId));
                        break MISSING_BLOCK_LABEL_144;
                    }
                }
                catch(Exception exception)
                {
                    PluginResult pluginresult1 = new PluginResult(PluginResult.Status.ERROR, exception.getMessage());
                    ctx.sendJavascript(pluginresult1.toErrorCallbackString(callbackId));
                    break MISSING_BLOCK_LABEL_144;
                }
                ctx.sendJavascript(pluginresult2.toErrorCallbackString(callbackId));
            }

            final PluginManager this$0;
            final String val$action;
            final JSONArray val$args;
            final String val$callbackId;
            final CordovaInterface val$ctx;
            final IPlugin val$plugin;

            
            {
                this$0 = PluginManager.this;
                plugin = iplugin;
                action = s;
                args = jsonarray;
                callbackId = s1;
                ctx = cordovainterface;
                super();
            }
        })).start();
        s2 = "";
          goto _L5
_L4:
        pluginresult = plugin.execute(action, args, callbackId);
        if(pluginresult.getStatus() != PluginResult.Status.NO_RESULT.ordinal() || !pluginresult.getKeepCallback()) goto _L2; else goto _L6
_L6:
        s2 = "";
          goto _L5
        JSONException jsonexception;
        jsonexception;
        System.out.println((new StringBuilder()).append("ERROR: ").append(jsonexception.toString()).toString());
        pluginresult = new PluginResult(PluginResult.Status.JSON_EXCEPTION);
_L2:
        if(flag1)
        {
            if(pluginresult == null)
                pluginresult = new PluginResult(PluginResult.Status.CLASS_NOT_FOUND_EXCEPTION);
            this.ctx.sendJavascript(pluginresult.toErrorCallbackString(callbackId));
        }
        if(pluginresult != null)
            s2 = pluginresult.getJSONString();
        else
            s2 = "{ status: 0, message: 'all good' }";
_L5:
        return s2;
        flag1 = false;
          goto _L7
    }

    public void loadPlugins()
    {
        XmlResourceParser xmlresourceparser;
        int j;
        String s;
        int i = ctx.getResources().getIdentifier("plugins", "xml", ctx.getPackageName());
        if(i == 0)
            pluginConfigurationMissing();
        xmlresourceparser = ctx.getResources().getXml(i);
        j = -1;
        s = "";
_L7:
        if(j == 1)
            break; /* Loop/switch isn't completed */
        if(j != 2) goto _L2; else goto _L1
_L1:
        String s1 = xmlresourceparser.getName();
        if(!s1.equals("plugin")) goto _L4; else goto _L3
_L3:
        String s2 = xmlresourceparser.getAttributeValue(null, "value");
        s = xmlresourceparser.getAttributeValue(null, "name");
        addService(s, s2);
        if("true".equals(xmlresourceparser.getAttributeValue(null, "onload")))
            getPlugin(s);
_L2:
        int k = xmlresourceparser.next();
        j = k;
        continue; /* Loop/switch isn't completed */
_L4:
        if(s1.equals("url-filter"))
            urlMap.put(xmlresourceparser.getAttributeValue(null, "value"), s);
        if(true) goto _L2; else goto _L5
_L5:
        XmlPullParserException xmlpullparserexception;
        xmlpullparserexception;
        xmlpullparserexception.printStackTrace();
        continue; /* Loop/switch isn't completed */
        IOException ioexception;
        ioexception;
        ioexception.printStackTrace();
        if(true) goto _L7; else goto _L6
_L6:
    }

    public void onDestroy()
    {
        for(Iterator iterator = plugins.values().iterator(); iterator.hasNext(); ((IPlugin)iterator.next()).onDestroy());
    }

    public void onNewIntent(Intent intent)
    {
        for(Iterator iterator = plugins.values().iterator(); iterator.hasNext(); ((IPlugin)iterator.next()).onNewIntent(intent));
    }

    public boolean onOverrideUrlLoading(String s)
    {
        Iterator iterator = urlMap.entrySet().iterator();
_L4:
        if(!iterator.hasNext()) goto _L2; else goto _L1
_L1:
        java.util.Map.Entry entry = (java.util.Map.Entry)iterator.next();
        if(!s.startsWith((String)entry.getKey())) goto _L4; else goto _L3
_L3:
        boolean flag = getPlugin((String)entry.getValue()).onOverrideUrlLoading(s);
_L6:
        return flag;
_L2:
        flag = false;
        if(true) goto _L6; else goto _L5
_L5:
    }

    public void onPause(boolean flag)
    {
        for(Iterator iterator = plugins.values().iterator(); iterator.hasNext(); ((IPlugin)iterator.next()).onPause(flag));
    }

    public void onResume(boolean flag)
    {
        for(Iterator iterator = plugins.values().iterator(); iterator.hasNext(); ((IPlugin)iterator.next()).onResume(flag));
    }

    public void postMessage(String s, Object obj)
    {
        for(Iterator iterator = plugins.values().iterator(); iterator.hasNext(); ((IPlugin)iterator.next()).onMessage(s, obj));
    }

    public void reinit()
    {
        onPause(false);
        onDestroy();
        plugins = new HashMap();
    }

    private final WebView app;
    private final CordovaInterface ctx;
    private HashMap plugins;
    private HashMap services;
    protected HashMap urlMap;
}
