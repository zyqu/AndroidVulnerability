require 'rubygems'
require 'zip/zip' 

require 'find' 

class ScanVulnerabilities  

  def initialize 

    system('cls') 

    @flag=1 

    puts "Checking for files.... " 

    if File.directory?("/bin") 

      puts "'/bin' directory found." 

    else 

      puts "'/bin' directory could not be found. \nPlease run the program from the correct folder." 

      Process.exit 

    end 
end 

  def extract(filename) 

      destination=Dir.getwd+"/#{filename[0,3]}/dex"

      begin 

      Zip::ZipFile.open(filename) {|file| 

      file.each do |f| 

      f_path = File.join(destination, f.name) 

      FileUtils.mkdir_p(File.dirname(f_path)) 

      file.extract(f, f_path) 

      end 

      } 

      rescue 

        puts "\nError Unpacking the File! Delete all Previously generated files of this apk." 

        Process.exit 

      end 

  end 

  def xml(filename) 

    cur=Dir.getwd 
    puts cur

    if File.exists?("#{cur}/apktool/apktool.bat") 

    cmd=Dir.getwd+"/apktool/apktool.bat d "+cur+"/"+filename+" "+cur+"/#{filename[0,3]}/xml" 

    puts cmd 

    system(cmd) 

    else 

      puts "Cannot Find apktool.bat!" 

      Process.exit 

    end 

  end 

  def dex2clas(filename) 

     

    cur=Dir.getwd 

    begin 

    if File.exists?("#{cur}/dex2jar/dex2jar.sh") 

    cmd=Dir.getwd+"/dex2jar/dex2jar.sh "+cur+"/#{filename[0,3]}/dex"+"/classes.dex" 
    
    puts "########################Command is runing############################"
    puts cmd

    system(cmd) 	

    dest=Dir.getwd+"/#{filename[0,3]}/class" 

    jar2zip=Dir.getwd+"/#{filename[0,3]}/dex/classes_dex2jar.jar" 

    puts "########################Current Directory ############################"
    puts jar2zip
    
    Zip::ZipFile.open(jar2zip) {|file| 
                                
      file.each do |f| 
      
      f_path = File.join(dest, f.name) 

      FileUtils.mkdir_p(File.dirname(f_path)) 

      file.extract(f, f_path)       

                               
      end 
                               

      } 
			      puts "dest------------------------------------"
                               puts dest
      else 

        puts "\nCannot find dex2jar.bat in the bin/dex2jar/dex2jar.bat directory!" 

        Process.exit 

      end 

      rescue 

        puts "\nError Converting Dex to Class!" 

        Process.exit 

      end 

      Dir.chdir(cur) 

  end 

  def clas2jav(filename) 

      cur=Dir.getwd 

      cmd=cur+"/jad" 

      system(cmd) 

      Dir.chdir(Dir.getwd+"/jad") 
      
      where=Dir.getwd
      puts "where--------------------"
      puts where
      
      cmd="./jad -o -r -sjava -d"+cur+"/#{filename[0,3]}/src '"+cur+"/#{filename[0,3]}/class"+"/**/*.class'"
      
      puts "########################Command is runing############################ "
      puts cmd
      
      if File.exists?("jad") 

      system(cmd) 

      else 

        puts "\nJava Decompiler file jad.exe could not be found!" 

        Process.exit 

      end 

      Dir.chdir(cur) 

  end 

  def check(filename,rulefile) 

    puts "\n\n\n"
      cur=Dir.getwd 

      @flag=1 

      system('cls') 

      puts ("Scanning files please wait...") 

      fc=0 

      vc=0 

      Find.find(cur+"/#{filename[0,3]}/src") do |entry| 

        fc=fc+1 
	
	puts entry

        if  File.file?(entry) and entry[/.+\.java$/]
           c=0 

          File.open(entry,"r") do |infile| 

            while(line = infile.gets) 

              c=c+1 

              File.open(rulefile,"r") do |rule| 

                while(r=rule.gets) 

                  exp= r.chomp 

                  if line[/#{exp}/i]
		    
                      open(cur+"/#{filename[0,3]}/output.txt","a") do |f| f.puts (File.expand_path(entry)+":  Line: #{c}:  "+line.strip+"\n") end 

                      vc=vc+1 

                  end 

                end 

              end 

            end 

          end 

        end 

      end 

      puts ("\nTotal Files Scanned: #{fc}\nPossible Vulnerablities: #{vc}\nOutput File generated at: #{cur}/#{filename[0,3]}/output.txt\n") 

    end 

    def manifest(filename) 

      cur=Dir.getwd 
      puts "\n-----------------------------\n"
      puts cur
      File.open("#{cur}/#{filename[0,3]}/xml/AndroidManifest.xml","r") do |infile| 

        while(line=infile.gets) 

          if line[/<service/] 

            line=line.strip 

            line=line[50,150] 

            line=line.strip 

            line=line.squeeze(" ") 

            line=line.chop.chop.strip 

            line=line.chop 

            puts line 

            open(cur+"/#{filename[0,3]}/permissions.txt","a") do |f| f.puts (line+"\n") end 

          end           

        end 

      end 

      puts ("\nPermissions Stored at #{cur}/#{filename[0,3]}/permissions.txt\n") 

    end 

end
